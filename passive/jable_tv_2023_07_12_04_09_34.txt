[{"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "4", "inputVector": "", "url": "https://jable.tv/sitemap.xml", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "0", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "8", "inputVector": "", "url": "https://jable.tv", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "1", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "10", "inputVector": "", "url": "https://jable.tv/cdn-cgi/styles/challenges.css", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "2", "alertRef": "10035"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "13", "inputVector": "", "url": "https://jable.tv/sitemap.xml?__cf_chl_f_tk=mqOLKzYWa4U0SNSOH28ghKIw09Q29swYv7niXI2uHV0-1689106175-0-gaNycGzNCns", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "3", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "13", "inputVector": "", "url": "https://jable.tv/sitemap.xml?__cf_chl_f_tk=mqOLKzYWa4U0SNSOH28ghKIw09Q29swYv7niXI2uHV0-1689106175-0-gaNycGzNCns", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://www.w3.org/TR/CSP2/\nhttps://w3c.github.io/webappsec-csp/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Report-Only Header Found", "param": "", "attack": "", "name": "Content Security Policy (CSP) Report-Only Header Found", "risk": "Informational", "id": "4", "alertRef": "10038-3"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Set-Cookie: __cf_bm", "pluginId": "10054", "cweid": "1275", "confidence": "Medium", "wascid": "13", "description": "A cookie has been set with its SameSite attribute set to \"none\", which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.", "messageId": "8", "inputVector": "", "url": "https://jable.tv", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site", "solution": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.", "alert": "Cookie with SameSite Attribute None", "param": "__cf_bm", "attack": "", "name": "Cookie with SameSite Attribute None", "risk": "Low", "id": "5", "alertRef": "10054"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "POST", "evidence": "<form id=\"challenge-form\" action=\"/sitemap.xml?__cf_chl_f_tk=b1QmihIjpOWc9opdhXwISHiAOvTKjr219aRPAz7seHA-1689106175-0-gaNycGzNFjs\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "13", "inputVector": "", "url": "https://jable.tv/sitemap.xml?__cf_chl_f_tk=mqOLKzYWa4U0SNSOH28ghKIw09Q29swYv7niXI2uHV0-1689106175-0-gaNycGzNCns", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "6", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Set-Cookie: __cf_bm", "pluginId": "10054", "cweid": "1275", "confidence": "Medium", "wascid": "13", "description": "A cookie has been set with its SameSite attribute set to \"none\", which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.", "messageId": "4", "inputVector": "", "url": "https://jable.tv/sitemap.xml", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site", "solution": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.", "alert": "Cookie with SameSite Attribute None", "param": "__cf_bm", "attack": "", "name": "Cookie with SameSite Attribute None", "risk": "Low", "id": "7", "alertRef": "10054"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/?__cf_chl_f_tk=F_omvdfodJ5H_i.iFaG_2hts5FhtZUqOKiQZcJPv8sA-1689106175-0-gaNycGzNCmU\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "8", "inputVector": "", "url": "https://jable.tv", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "8", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "14", "inputVector": "", "url": "https://jable.tv/?__cf_chl_f_tk=F_omvdfodJ5H_i.iFaG_2hts5FhtZUqOKiQZcJPv8sA-1689106175-0-gaNycGzNCmU", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "9", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/sitemap.xml?__cf_chl_f_tk=mqOLKzYWa4U0SNSOH28ghKIw09Q29swYv7niXI2uHV0-1689106175-0-gaNycGzNCns\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "4", "inputVector": "", "url": "https://jable.tv/sitemap.xml", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "10", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "POST", "evidence": "<form id=\"challenge-form\" action=\"/?__cf_chl_f_tk=dddyuJsZOKIK1MbQIUo1wL7VJ4paGK5kvzbHUZj3raQ-1689106175-0-gaNycGzNFhA\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "14", "inputVector": "", "url": "https://jable.tv/?__cf_chl_f_tk=F_omvdfodJ5H_i.iFaG_2hts5FhtZUqOKiQZcJPv8sA-1689106175-0-gaNycGzNCmU", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "11", "alertRef": "10202"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '32465',\n            cRay: '7e53af5ab8b68335',\n            cHash: '34faf514ec5e77f',\n            cUPMDTk: \"\\/?__cf_chl_tk=F_omvdfodJ5H_i.iFaG_2hts5FhtZUqOKiQZcJPv8sA-1689106175-0-gaNycGzNCmU\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di8=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: '7L+3mIVVZngs0idnoYYlb7SqGJEOG2vlwR9ORDSZvclx6GjZoyCynjaYkf7GnY8L259p+zIanBr/A8xdiF+o2QT1VElNMI0GM2Mz2hKqcuyZmtI6nqMUQ3liJqSbOq9kIlX57dCTBI2p2uyJDaFGOCfUbLgzzlBCRxkUpvoC2jpTrYNyZoCCpOm/5pKPbLO9eQaMMDZW5PyOHncbUFSYuq4zxXouX5HkROFnCD6Sw+NX6CRVIfSaZp1+zfqLaoAcChYjgRJfLcsjOr67WQab5Q4dxSobUmXwQN8xX6A8NlKENHJQBAu38uLS4LKYgBAdMMPU6ZNQZ3xtIpcIeo484fWbczZuVmYtj0kiVbhsWRo/5g3r4adDvi4yqRT6o4LySKbwvsxps+ZHTLBKSyIy7oD2Tn1iUSnmH+iWV+BDP8hsiIiTZoo57YJr+bY9+PBwBd+yWpvRoTgj8nL7aS/yXKP4McZIwbX4jX2ldeBRZeOgiWrAEShZutrKNA0TXneboG51ChEiaOuXXa0Pj31V0lr31zl8Tnjtv+hhqiFP5is=',\n                t: 'MTY4OTEwNjE3NS4xNjAwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'EEQ3f1ZFy7kPiwgB/m5SdMuN37veGmMh83rrEPbcZqc=',\n                i1: '+efohQcxoXuWJD7UK5ydsQ==',\n                i2: 'k2cW6qjXp1FFQUdCwReQWA==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af5ab8b68335';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/?__cf_chl_rt_tk=F_omvdfodJ5H_i.iFaG_2hts5FhtZUqOKiQZcJPv8sA-1689106175-0-gaNycGzNCmU\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "8", "inputVector": "", "url": "https://jable.tv", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "12", "alertRef": "10109"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "POST", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '35510',\n            cRay: '7e53af5c9b5d8360',\n            cHash: '71f8c8acf98db1a',\n            cUPMDTk: \"\\/sitemap.xml?__cf_chl_tk=b1QmihIjpOWc9opdhXwISHiAOvTKjr219aRPAz7seHA-1689106175-0-gaNycGzNFjs\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9zaXRlbWFwLnhtbA==',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'UE9TVA==',\n                d: 'sUrWztiDYgoHz5F+2Hw5QjIIRXrQ3+hByPrp0g9uH9OX4w7gzymCFGIgbzs1WwRRiYxEVZaJnHKTEA69bn7qoX0w3Ah9KOuf8qKvfjlWHXQxmuYd7yuUDfbMpUJ73AVukZIpkmnJ7X42Od1pl0dNkwPVnr3YuD/dxFZyIEpZzPWClyRxO5F86zRONa0J3dkKm0h6QwCg5ppfVNTQOgZ6Ul3BcUhuxYMU3zTtT6nbsKKYprogeypiiREzt98I495SmtgcDh0AWOhpdUh3t/YqRZnj1r26/E2j40/3MP50DE8jl3av/JnBP845v9BLVFLUsqHM2d/gTYP2fPEhVgOo8aZN26fB7qVDB7I5aXr9XxAjJXzp3co9HDFxnxIRglDRzcfCA388bu9RRhoyGIMz8UXKpsPCSzPmeKlBBTaMvQc8C/b4tWWv3bi+rdaGh3svCg0c9iez+Mwll2rjWznUJIJSQKH2BZWSsTAiatzb608hLh07+jhdvlSKCJgyraqoZ7pAJprH0bObwzSJ/QniXee8KPa+KfHutf07WwFSnbk=',\n                t: 'MTY4OTEwNjE3NS40NjEwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'pFJ89d+odIrpQ4W9hFhsf2zdGIbKEfUX456czypEtzc=',\n                i1: '05JbPydZrh7Wubr9a9LmZw==',\n                i2: 'hFPBjVBOt/XZyvwVR+8pTw==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af5c9b5d8360';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/sitemap.xml?__cf_chl_rt_tk=b1QmihIjpOWc9opdhXwISHiAOvTKjr219aRPAz7seHA-1689106175-0-gaNycGzNFjs\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "13", "inputVector": "", "url": "https://jable.tv/sitemap.xml?__cf_chl_f_tk=mqOLKzYWa4U0SNSOH28ghKIw09Q29swYv7niXI2uHV0-1689106175-0-gaNycGzNCns", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "13", "alertRef": "10109"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '95211',\n            cRay: '7e53af5abcf08cfa',\n            cHash: 'f20e122c17a35e8',\n            cUPMDTk: \"\\/sitemap.xml?__cf_chl_tk=mqOLKzYWa4U0SNSOH28ghKIw09Q29swYv7niXI2uHV0-1689106175-0-gaNycGzNCns\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9zaXRlbWFwLnhtbA==',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'jOfmRTH+JW9W+V8iFDvfSUNrM1RIeqDzxubVza7S+xJvZDmwnAzydxYu4VVvL1l8IzxHqk+TcIA6b4W9D52fFe481+oFAPPOb8ENn2KAnxp1ObPYDLLATv5i0gRdjUJQaF6HhIEEqTLP+fERUSQBRlAuPg+F2GEEGEOxreuCmYsHCvt+++yy3uQ7bukl8daMYm/fyJjreOYMLVuyx+KKujmk9i4Q5TVThDDBSziGE2wXQrSsEn3pbmqsuLiZDHYCtIsJkaIN106zJFTwGSwxYTdPyLW+IQ4EGndRpfttB+IpEJkandFk5WBhJBoYt1EQvnW6zM3QaQ7UDkh5+LYl1pWgHPcyVtyYhvg/LyM8sCSDEJfNxCrR8EUD22mZwyiSrCeM8AHEiAqHhMd+aUKc5Xbrv9pfe84XLLMUF1t19Q5v7ymVKgWl1qANEYBEfaTJud+s0cZ7S1MOtalgt7+KKCZ2VfZ9VWcu3oH9Y7GWvqDuZJwkEUT2+tVI+/MuM5WwjY9dik8rE5uiGTfIqb4xpiFcjOE2TYC/cPTjrY8B8S4=',\n                t: 'MTY4OTEwNjE3NS4xNTgwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'yL5bWmwfZLP1ATE1K9nIwQj7GyprKvEuYb6MYB7jnWw=',\n                i1: '6Mu5VkuqlZDg1mF7Crzfmw==',\n                i2: '2ReSUm1F6tl3IYXrXYWTcg==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af5abcf08cfa';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/sitemap.xml?__cf_chl_rt_tk=mqOLKzYWa4U0SNSOH28ghKIw09Q29swYv7niXI2uHV0-1689106175-0-gaNycGzNCns\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "4", "inputVector": "", "url": "https://jable.tv/sitemap.xml", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "14", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "8", "inputVector": "", "url": "https://jable.tv", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "15", "alertRef": "10035"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "13", "inputVector": "", "url": "https://jable.tv/sitemap.xml?__cf_chl_f_tk=mqOLKzYWa4U0SNSOH28ghKIw09Q29swYv7niXI2uHV0-1689106175-0-gaNycGzNCns", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "16", "alertRef": "10035"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "POST", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '82713',\n            cRay: '7e53af5cbb960abe',\n            cHash: '0b45be8f469e6c5',\n            cUPMDTk: \"\\/?__cf_chl_tk=dddyuJsZOKIK1MbQIUo1wL7VJ4paGK5kvzbHUZj3raQ-1689106175-0-gaNycGzNFhA\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di8=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'UE9TVA==',\n                d: 'OTldJUWY2nqFuD2298Q7RH0GDrg0aah0ICZDWWFIwEDru6z6UDHz7I6hQa1C8wYwET1eBQ7fLWK+Z5eyV4FA9mrAtf9ABUOuXb109eqFFNK3+s5Sd8KOWcOyEsnYthfH+rPiopchqAsYhAPuTYeuh+AnEVGQ7THLuh/Otg0ln6Zpj7itKlX8tg7XBT1IN0J9YAsyLYAwFcWvRF+UX6DCSNk/nMKksbq2vvz6UI92sYvCfZosaiL8rqIJLbt2QxmxaoerBnjBkH/K03cgaH/z1eZkQCeyeVlVNF6GGNzT5BpqCdJhPdX+Tz1Jg/CaGveTgJ/ZpN+nl6up0d5NEd3v+/TmWHzQBE1+zdNnygjf80TnMFr9JX18rPvvO8x1osxWh4wzNvf6coRVyw73sj76rb83GvY8aryXZ4Zo/zV/1NOlyFlRJYX6QUl9lm2tqton9DBobCAtGHg8Oa5Rf8R8qEW9bYw6fjQ1kFIvQKIA8Hd1ux3rttnxCp4knjgoF2g0hEREL1vUjrKI1zAg6Jmpy+ZpOIBfj8MVoK0FBuC5gyU=',\n                t: 'MTY4OTEwNjE3NS40ODgwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: '3rFH801LzVZUs0QwC2cPAl9QKy4iqdh0010jifs/CIE=',\n                i1: 's1ejXzYVM0YDId06kLZToQ==',\n                i2: 'V9/sRoerehFWfxywgjeCFQ==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af5cbb960abe';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/?__cf_chl_rt_tk=dddyuJsZOKIK1MbQIUo1wL7VJ4paGK5kvzbHUZj3raQ-1689106175-0-gaNycGzNFhA\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "14", "inputVector": "", "url": "https://jable.tv/?__cf_chl_f_tk=F_omvdfodJ5H_i.iFaG_2hts5FhtZUqOKiQZcJPv8sA-1689106175-0-gaNycGzNCmU", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "17", "alertRef": "10109"}, {"sourceid": "3", "other": "1689106175, which evaluates to: 2023-07-12 04:09:35", "method": "GET", "evidence": "1689106175", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "8", "inputVector": "", "url": "https://jable.tv", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "18", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "4", "inputVector": "", "url": "https://jable.tv/sitemap.xml", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "19", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106175, which evaluates to: 2023-07-12 04:09:35", "method": "POST", "evidence": "1689106175", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "13", "inputVector": "", "url": "https://jable.tv/sitemap.xml?__cf_chl_f_tk=mqOLKzYWa4U0SNSOH28ghKIw09Q29swYv7niXI2uHV0-1689106175-0-gaNycGzNCns", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "20", "alertRef": "10096"}, {"sourceid": "3", "other": "1689106175, which evaluates to: 2023-07-12 04:09:35", "method": "GET", "evidence": "1689106175", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "4", "inputVector": "", "url": "https://jable.tv/sitemap.xml", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "22", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "14", "inputVector": "", "url": "https://jable.tv/?__cf_chl_f_tk=F_omvdfodJ5H_i.iFaG_2hts5FhtZUqOKiQZcJPv8sA-1689106175-0-gaNycGzNCmU", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "23", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106175, which evaluates to: 2023-07-12 04:09:35", "method": "POST", "evidence": "1689106175", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "14", "inputVector": "", "url": "https://jable.tv/?__cf_chl_f_tk=F_omvdfodJ5H_i.iFaG_2hts5FhtZUqOKiQZcJPv8sA-1689106175-0-gaNycGzNCmU", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "27", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "max-age=28800", "pluginId": "10015", "cweid": "525", "confidence": "Low", "wascid": "13", "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.", "messageId": "15", "inputVector": "", "url": "https://jable.tv/robots.txt", "tags": {"WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/", "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".", "alert": "Re-examine Cache-control Directives", "param": "Cache-Control", "attack": "", "name": "Re-examine Cache-control Directives", "risk": "Informational", "id": "39", "alertRef": "10015"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Set-Cookie: __cf_bm", "pluginId": "10054", "cweid": "1275", "confidence": "Medium", "wascid": "13", "description": "A cookie has been set with its SameSite attribute set to \"none\", which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.", "messageId": "15", "inputVector": "", "url": "https://jable.tv/robots.txt", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site", "solution": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.", "alert": "Cookie with SameSite Attribute None", "param": "__cf_bm", "attack": "", "name": "Cookie with SameSite Attribute None", "risk": "Low", "id": "40", "alertRef": "10054"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "42", "inputVector": "", "url": "https://jable.tv/*?action=*$", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "41", "alertRef": "10038-1"}, {"sourceid": "3", "other": "1689106175, which evaluates to: 2023-07-12 04:09:35", "method": "GET", "evidence": "1689106175", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "15", "inputVector": "", "url": "https://jable.tv/robots.txt", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "42", "alertRef": "10096"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/*?action=*$&amp;__cf_chl_f_tk=Xxd3XdmfNzyqOaOf39uZNCzUXbNfgJ89Vm8DK00GXkI-1689106176-0-gaNycGzNDPs\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "42", "inputVector": "", "url": "https://jable.tv/*?action=*$", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "43", "alertRef": "10202"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "15", "inputVector": "", "url": "https://jable.tv/robots.txt", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "44", "alertRef": "10021"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '62339',\n            cRay: '7e53af617d5419e2',\n            cHash: '7eed49ccabfb8b6',\n            cUPMDTk: \"\\/*?action=*$&__cf_chl_tk=Xxd3XdmfNzyqOaOf39uZNCzUXbNfgJ89Vm8DK00GXkI-1689106176-0-gaNycGzNDPs\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di8qP2FjdGlvbj0qJA==',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'e9sLhKg87QEvKFquG2p4m0qNimux1WPy3IqozkzlIvpQeynaCweJ62gPVGWb6tf+3frpTtusHaKk+htMMsa4kZpL4w5wuH2ykwdkLg/U2JMDDVt9VK+h90+MOBrAIGh3QIuBvIwA050TcE2VEAG7yD2aiH5KdNay6XsrlNuLxwZ9OrNi8veg3HaZWTcetYOf5HwXsD49HYPLmExOmarXgQlaoi9SyCTorpqOWe5sy8QUrPALy7MDwGP30bU5Xezan8US8h2XT5BID7mNjn+vKwPA4f+B15Sx9zVSuVMx8l6kEBs8Uf7sfUhDsA35/FAMWkGzI1qFMncLQMaZriSLz6aOAamllh+VaLbUr9vyF1fkvd+YMtzoYQ4Z4zGvDvpeyDB5nULDoqfUJUUoxQ0SExnh0gwupjshSLldpWfdV5EFY5lXIdaTzFhIPNjj6W6qOw0mkvsHB82O1CFmV1Odjn8aIwy3WmbBiODmlk2tIo8+cJ0vO9JIGvZQ9QEOCR0tJz2BuSjqadF+sYy3VkyLaYlo4TJr07c1F9PBmlo41Zk=',\n                t: 'MTY4OTEwNjE3Ni4yMzYwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'OXSvQfXnL+ioHpZ746w0eC2fWhkbhUcB+sBrgSeVul4=',\n                i1: 'XhXOBBo9Ibj2QhV+dVYrMQ==',\n                i2: 'QYPXHf5qAs0U2rJYRza8EQ==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af617d5419e2';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/*?action=*$&__cf_chl_rt_tk=Xxd3XdmfNzyqOaOf39uZNCzUXbNfgJ89Vm8DK00GXkI-1689106176-0-gaNycGzNDPs\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "42", "inputVector": "", "url": "https://jable.tv/*?action=*$", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "45", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "42", "inputVector": "", "url": "https://jable.tv/*?action=*$", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "46", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "42", "inputVector": "", "url": "https://jable.tv/*?action=*$", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "47", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "40", "inputVector": "", "url": "https://jable.tv/player/float.php", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "48", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/player/float.php?__cf_chl_f_tk=twTTD21fUsGQFN.rFkdA2NrK6ULWpkSFXMHktwrdjcI-1689106176-0-gaNycGzNCjs\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "40", "inputVector": "", "url": "https://jable.tv/player/float.php", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "50", "alertRef": "10202"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '28075',\n            cRay: '7e53af603e768346',\n            cHash: '610fc0e1ce52291',\n            cUPMDTk: \"\\/player\\/float.php?__cf_chl_tk=twTTD21fUsGQFN.rFkdA2NrK6ULWpkSFXMHktwrdjcI-1689106176-0-gaNycGzNCjs\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9wbGF5ZXIvZmxvYXQucGhw',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'YI2U+NAJ8Q658tmiJVMQL95MZEEhUNSXQu2HoUN6pHp+QeQ8enXnkszEEKYJiM0tR+d6ca5PBpHxu6EjbBaVBHoJhbxFBpZSmFXwb4TulnqXv90hJo9CrhwrAWA6ZjJ7lJxWY8DxmXjG9mAiv6xxj3a1OgR2q7H+2K9NqsuOs8yAScrW0w1O2FijGJKaRsMcwxGSifNdYLKdydBO8WvGLsy4h5YWVf1xbQpq13Hpno/O9eKpvnlfD4vWLytwWZAXt2yU5485yWsJCU/3G642Putz8tp/60s0eMDhoswXgSvZskcNR1mp+xCQDSQPHwqkMFRJ7G0cE4+GEGOruH3eGB8MZnUrJS//xaygwN/f60NwO4J2FM9az0YYe+iHNL3E/J7uR+uNnxy+VohppHqjcktvF6k1mONieN/Aed4XDosO3n6kz99xZ/tB201i90nh2GwjbxArdbwsV3HAbTuuRK/Ve/XN4PwgsgqatUVMF6Lej3/MgtDGGlKLFrnQn88X7Aixi33qj5/IKpnVNm6p2a1cJ3Jn/7UfSbrr6bxHgSk=',\n                t: 'MTY4OTEwNjE3Ni4wMzgwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'lplKIFVpxOdAbzSDfMKPYEVSxAGSYx0n5V0BCePg+2M=',\n                i1: 'ZzojzbMQZCbmlemyC2HeHA==',\n                i2: 'ORHS4W0jW0iNPqqUTwm06Q==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af603e768346';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/player\\/float.php?__cf_chl_rt_tk=twTTD21fUsGQFN.rFkdA2NrK6ULWpkSFXMHktwrdjcI-1689106176-0-gaNycGzNCjs\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "40", "inputVector": "", "url": "https://jable.tv/player/float.php", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "53", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "40", "inputVector": "", "url": "https://jable.tv/player/float.php", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "54", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "40", "inputVector": "", "url": "https://jable.tv/player/float.php", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "55", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "43", "inputVector": "", "url": "https://jable.tv/redirect_cs.php", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "56", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "44", "inputVector": "", "url": "https://jable.tv/*mode=async*$", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "58", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/redirect_cs.php?__cf_chl_f_tk=17csY6gk.3bu9bH..G_9HYWsIFNWBMViVUmcFEPUfSY-1689106176-0-gaNycGzNC5A\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "43", "inputVector": "", "url": "https://jable.tv/redirect_cs.php", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "59", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/*mode=async*$?__cf_chl_f_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "44", "inputVector": "", "url": "https://jable.tv/*mode=async*$", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "61", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "45", "inputVector": "", "url": "https://jable.tv/player/html.php", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "62", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/player/html.php?__cf_chl_f_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "45", "inputVector": "", "url": "https://jable.tv/player/html.php", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "64", "alertRef": "10202"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '42476',\n            cRay: '7e53af617b551a1a',\n            cHash: '8eba447103ec420',\n            cUPMDTk: \"\\/redirect_cs.php?__cf_chl_tk=17csY6gk.3bu9bH..G_9HYWsIFNWBMViVUmcFEPUfSY-1689106176-0-gaNycGzNC5A\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9yZWRpcmVjdF9jcy5waHA=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'zHevvtj5I5qEHdUJ8akup+gGh6Fd9nIpx90gAGDIjpemgRDpTS+FlLZ/BK5fQcwJLhpqzA7cTocaWzgpWpMX7jnW1Jp4+iX888sz+nQKeqm0RGgPjM6USU0uKyie6bc+D0TY9Nrc62z1uVT5aTmwuf/X3LzNDzvW9oza+npXV8SZCqb3XG/nO8vYCJwAC8jCY7AQTg0prsKWTmayDwYo+F7cd6FxEawVggOMlwWk2mVR38jT2Kjb07HR0K55oghj5vm7pahVCAQq2pXgyiWvl+ccp5jFRVY3IUjsc6xe7ks17QOQ3wXhX09uQoRvWXJBhJcWS6tfEgz0giBoFApsl+PRioPUyYIMHz7kWZo1uSKexJtyO3GdtoACpCNTx8Pv5hE7bPfKK7Y4Ufcs71psNQoGfkpypNpJQ2+kNnw7sDw7notMEx7SjaQ/Ag+D8y0Aku787M8BAKuBxKBKnIzjkwIkwfwjXJhFbkeKgMont3OXH8JpqIxTG4/BZiV4OOH7H0zq2iZLf726d5TY8B7W508yKVyt0AY7M+nC/05d1tQ=',\n                t: 'MTY4OTEwNjE3Ni4yNDAwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'Lz79VvTzrxW5Ar5DQVko0h2h+yigmg6fNBSQ0+Q0Q7A=',\n                i1: 'KN/a+z2BKNL+brIhUX1EEQ==',\n                i2: '5x8DL7N4zwAqQPqlT+TjcQ==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af617b551a1a';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/redirect_cs.php?__cf_chl_rt_tk=17csY6gk.3bu9bH..G_9HYWsIFNWBMViVUmcFEPUfSY-1689106176-0-gaNycGzNC5A\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "43", "inputVector": "", "url": "https://jable.tv/redirect_cs.php", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "65", "alertRef": "10109"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '90580',\n            cRay: '7e53af618daf8cfb',\n            cHash: '4abe0b3617c6e71',\n            cUPMDTk: \"\\/player\\/html.php?__cf_chl_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9wbGF5ZXIvaHRtbC5waHA=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'l0xMobmW+jsrj0BnXxzhdKsK74P7qcuWLUO8V0mzsBObR/KT/+qY+dZ2+71yjJwZXOjytHoj+AaLvmThhW9jS3lxh/7mIKEFtPf+eGGfdCnMl2tlwS3sBmXVyAPK2uPCteUQ1xswpqf3XbLi6NzVFPQyekGm6gpoRzm7En704n2Ja7vXlBZ6oNIkelgIgbjk0GT3YKUv52gCry0+U8Cl0n2Fu/kdbPlrHFbZUFtpu+NZTb2vt0bQGy1STPg1Fg9vnmgksilwL6bNzw+eOpl4AiZPf2SDbeazx31axowy50PfhjZctkyf5adzd/81K7a3tqRhUg34zhhnuSDz9Z/RrUnldqeCTYpTwIioszqgeuOYmyy7NlOPeaTm1WelWKZQsU7g+7ZDCbeN3+U6t7L4V77kFlvbc9D13oxyCcnoQhz87AFv4nC2o7PiDf0centswOoStpfa29sv9nrjSSfe7kJb9JkhZzbbA3eflUa3xbxFvJKluNmAt4Ti3mu5ozqNmCR5xFnRCTCAlWpbzAPn8h4lgSfYHRjWGiyy+/DagQs=',\n                t: 'MTY4OTEwNjE3Ni4yNDcwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'cc6NSpy/4FKxw5VLKdV3/6NrNHgADpufygl+uMpS4wU=',\n                i1: 'w3JkuCNqPPifbAEaBIr/6g==',\n                i2: '4Sh3JjKpamdrkc0VnAhPuw==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af618daf8cfb';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/player\\/html.php?__cf_chl_rt_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "45", "inputVector": "", "url": "https://jable.tv/player/html.php", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "66", "alertRef": "10109"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '98298',\n            cRay: '7e53af618caf835b',\n            cHash: '3b6107c4f13f733',\n            cUPMDTk: \"\\/*mode=async*$?__cf_chl_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di8qbW9kZT1hc3luYyok',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'kTFhB9HpO2jssNFtoGIfUDjyvXMnEGSGsbBv8mKTk/rjhps39Dtc/hzWh11zSwrRRY7Y54WNIY+10hDlUaqQiG9thnN4hhM3Zls1xFMTbt0jlRRbWForxXCvtJ2Wf2Eyk9+rOR9/CdVDPo6UcVC8cgtRR03TdapNZynagt19dDbQybE7IJpooTU0g6iqZWBAR5D1td7RivtmDaC1Cy0bX6VqbJicG4RmRsypLpvlFIMQZnRpOU5+zQUkvOSRyjQWvOycH8vHKo49ugtZpUAlC41dAOfu/nW+AAScvZxPnyrM0ryM5I83DRljg+2i41NYry2gfXRgUjvnXVX1gkCI/aL0XTL4qOeEucXcM0vkSRkCzqPxDFZ7HkA5MJRill5d9l1JRP4Jhw3UGsBkX0hD47Urn6MW4HG0/sm8/4XnIUEF56gndwL1wzBIh9OKB/J/r+QP2NCnIZy1aF+pCsXLnevSLuw9zuoXTJvK5ULMmFzB4LwVxo23SEIU0trLfmv8HnW66IGqSCEqxhdBg90gyItGCuS2/aAHlCnk6oGSCq4=',\n                t: 'MTY4OTEwNjE3Ni4yNDgwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'DoAY4EkxghkzhEQR5kV7z1bj76+NPNfjPPkHgeO7Q8A=',\n                i1: 'gvFCoQsQhSLX5/SFQN3DzA==',\n                i2: 'sPrctU9cmJKDoMBAAlXHEg==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af618caf835b';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/*mode=async*$?__cf_chl_rt_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "44", "inputVector": "", "url": "https://jable.tv/*mode=async*$", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "67", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "46", "inputVector": "", "url": "https://jable.tv/*function=get_block*$", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "68", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "45", "inputVector": "", "url": "https://jable.tv/player/html.php", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "69", "alertRef": "10035"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/*function=get_block*$?__cf_chl_f_tk=0egkVMyjonjWvlVW4usagEP.E37Ac822S_MCfr12UTM-1689106176-0-gaNycGzNC6U\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "46", "inputVector": "", "url": "https://jable.tv/*function=get_block*$", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "70", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "43", "inputVector": "", "url": "https://jable.tv/redirect_cs.php", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "71", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "45", "inputVector": "", "url": "https://jable.tv/player/html.php", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "72", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "44", "inputVector": "", "url": "https://jable.tv/*mode=async*$", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "73", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "43", "inputVector": "", "url": "https://jable.tv/redirect_cs.php", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "74", "alertRef": "10096"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "44", "inputVector": "", "url": "https://jable.tv/*mode=async*$", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "76", "alertRef": "10096"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '20264',\n            cRay: '7e53af61891319e5',\n            cHash: '6f761c7194f50d5',\n            cUPMDTk: \"\\/*function=get_block*$?__cf_chl_tk=0egkVMyjonjWvlVW4usagEP.E37Ac822S_MCfr12UTM-1689106176-0-gaNycGzNC6U\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di8qZnVuY3Rpb249Z2V0X2Jsb2NrKiQ=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'FuucHtHdxQtXz/braYM0tGe2EI3x4cXa6Kl4s4u4XB4XfenT8SzOqFp77erTIhIGasksjfc+LxZJHdkMqGZpW9HrScJDiov7XeRDwulynlLZAz50qN3dkBYF2uvWiAsZl3HqWlyntBclC2AKwpD8GUzHUERSJPIyuNBaEThpk0gFaK08iu2Bha5sqAujUuDLtcPG1sK4VytJ0XJLoK8DVs0wXFcgSKtN1g7W3ePyJGtjB11n+KKQW0QiPUoEc39/IkV1jiOa6dTWHPRBC1LA9nu7wnckpiAKed+i2iGB0n7T+Ln7vHrGRx7xlWMnhVVXku11F3lo8MXpzFrORS7zUbOBo6t3WHbi7kzJQ0oh502QPFxMwIV5Oh0AxV7omCkveZXx9MQRZS3PAPpbW9t+Sd0UzK+OEdSZQkTO99KTA3Kq2yX2Mk0uogAwh3wSc9083VK4NEakoWffXV1ISID24iu4vdrayd1bM762tqkMxcoS+nT9Do5PvOSg2Thg6EsDb+V1WVyOI1m98XJ19Grk93WixXoXCKXbOIZsmyA5eic=',\n                t: 'MTY4OTEwNjE3Ni4yNTUwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: '5+JJbOmR0BqJ9tj8y7L9gsWpvE+MFP5QGdKQQNB53MI=',\n                i1: 'TbZ5KUhLBrY9pgpUzzYWFA==',\n                i2: 'eJkQXPsReHDcsprlrouCDQ==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af61891319e5';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/*function=get_block*$?__cf_chl_rt_tk=0egkVMyjonjWvlVW4usagEP.E37Ac822S_MCfr12UTM-1689106176-0-gaNycGzNC6U\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "46", "inputVector": "", "url": "https://jable.tv/*function=get_block*$", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "80", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "47", "inputVector": "", "url": "https://jable.tv/404.php", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "85", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "48", "inputVector": "", "url": "https://jable.tv/email/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "86", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "46", "inputVector": "", "url": "https://jable.tv/*function=get_block*$", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "88", "alertRef": "10035"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/404.php?__cf_chl_f_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "47", "inputVector": "", "url": "https://jable.tv/404.php", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "89", "alertRef": "10202"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "46", "inputVector": "", "url": "https://jable.tv/*function=get_block*$", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "90", "alertRef": "10096"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/email/?__cf_chl_f_tk=Xxd3XdmfNzyqOaOf39uZNCzUXbNfgJ89Vm8DK00GXkI-1689106176-0-gaNycGzNDPs\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "48", "inputVector": "", "url": "https://jable.tv/email/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "91", "alertRef": "10202"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '89475',\n            cRay: '7e53af62194a1a2b',\n            cHash: 'd8a9784fcd0f736',\n            cUPMDTk: \"\\/404.php?__cf_chl_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di80MDQucGhw',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'yHGigsBKmt59Ih+mOs6aOxLsH3lXfVLPWPjRMJWvRjq9hFTQHpC0ggaEly10NjSPHz84oIdnwmmHmRkqJJfD1J+10vSEGDSD6Rukg0hkF3vrBHb2y+Dspa4W7UrmZ0kD9FhnbCru++kg71IoWEpcegdGdNbkoi1tCssxuwnDNRNUm+n3Zg7sS+CNmhnDhLxDnpwkVKLnmxJObwiqGATEzbdvb8Y//xiol0LLhB6cUpBaFD8P0PseM/uCk0zujMcF5/t3orzosllQgf5pl2TMiprpMhncDQ673upEshhMr1vLyu2fCWG2elRDY9BBId1M3hzxq0zPmfga1OjlLjxJoQ0Xp3KUmYgYwOnVcgedNjhIwJjNjJEmWOINwojzj//kTedMphygdv/WPfHbIQvAtRApNQ27Ob74myXaWh1rS+hUqnD321FBuKkBHZIAnrCCBmRGyFSExLZjbtbSEgNd08wxkjyJWiWH8KXgf+KW//UBJzri6u4LkzXbg8FEBeIfTjpzE2ykVK9Pj4c7o3wV9qKVnoZ3g+0komcmnyAn8x8=',\n                t: 'MTY4OTEwNjE3Ni4zNDQwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'FxoW90FIL/MvGqg3CYXtOn1AxvXoLntsijxJBrzEtU0=',\n                i1: 'stJ8B5OUuZY0CSrGwlbhZA==',\n                i2: '7zgrHmdRvbBhjgT9/JNq4Q==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af62194a1a2b';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/404.php?__cf_chl_rt_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "47", "inputVector": "", "url": "https://jable.tv/404.php", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "93", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "50", "inputVector": "", "url": "https://jable.tv/logout/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "94", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '62076',\n            cRay: '7e53af63592d835e',\n            cHash: '69f6d05138c1968',\n            cUPMDTk: \"\\/email\\/?__cf_chl_tk=Xxd3XdmfNzyqOaOf39uZNCzUXbNfgJ89Vm8DK00GXkI-1689106176-0-gaNycGzNDPs\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9lbWFpbC8=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'pzxZQ3VotKYcWTLdmJucMu25jRV5J4k4x7HVfWQypd89GKndzI27XRbWCWATolP6R/+txdrr0WP1OKZOMml66yC9lQvPc+7FTC+NuhbHSkcFIMbCrRBR73VY9zPooyMIkQDOOm2cvoO3DlzkKKDSd7ENQggss1DDniPT9Bj8feRWNMLsykSs3Tz5wxivINGYv19dutPiC5iW8FCuE1B2RyZwECPosear6ZaVO1jeyocbHYP0Pbq+E+FVZl87xmJ9PF/f0Vu5tkyq/BTcMtKb6NOtNc2o73mUV2fPC/fPKDiL5jmZFP/R9wGtInDdBWiYGzLs+nCXw1aaNn7hioiCldV59FVuHIiXMTaGr7NAuo8lCEu8rgbkXHGpRpmKymEXSIVoMrZuaSHC2GYI4HP2o6dkcMe4o938qRdfhFU11Ldrtsyk0erp4FUbpyp8CBqPyMT4ucGy4jLlS3ODeyCR14Xk2z/LMgpHqc2JifCm95NeqpQLH0tEHfQRtsGactVolH0MtC4hTsZaRyJdsAw4rMTc8UPvwExYXS2VVcLjZ1s=',\n                t: 'MTY4OTEwNjE3Ni41MzUwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'eK5zHAj80CJ1HBc+QV/A1b1O0lIm02VJul0uTFpR4PQ=',\n                i1: 'h7P2NfIIyVZgTb4oyuJ/5Q==',\n                i2: 'QUtSjA4wH1pp/T/R8Bo7lQ==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af63592d835e';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/email\\/?__cf_chl_rt_tk=Xxd3XdmfNzyqOaOf39uZNCzUXbNfgJ89Vm8DK00GXkI-1689106176-0-gaNycGzNDPs\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "48", "inputVector": "", "url": "https://jable.tv/email/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "97", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "47", "inputVector": "", "url": "https://jable.tv/404.php", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "98", "alertRef": "10035"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "48", "inputVector": "", "url": "https://jable.tv/email/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "99", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "47", "inputVector": "", "url": "https://jable.tv/404.php", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "100", "alertRef": "10096"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/logout/?__cf_chl_f_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "50", "inputVector": "", "url": "https://jable.tv/logout/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "103", "alertRef": "10202"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "48", "inputVector": "", "url": "https://jable.tv/email/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "105", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "52", "inputVector": "", "url": "https://jable.tv/login-required/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "108", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '98328',\n            cRay: '7e53af6358961a1d',\n            cHash: '9d25163a14ab856',\n            cUPMDTk: \"\\/logout\\/?__cf_chl_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9sb2dvdXQv',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'rZ6XcEeI2SZHakJDgzycJlHqq4jFARd0HMdU7Dl+w/NNRoEBWFxJwqR8/NpXCEuo9ZIMvhqv8ZXyUBunLwyKkzOBSULQLvqHt7hef3FwfLM+VtZSkN46iOFN7QURi7+Bn/xD29pCqi7c548A75kYnLeF928tw4u9tdHvsiDYc0TtMYJAKzHsSL4rvLMlYbOpbxZeXTtJYwVJviJTlPtBhwXZMGcVJXK5qU+j4FYB+uFBU/E4GqZoEJkh/y7zl0/djPoN+B8gqF7OkBQAjcCUVmrW5Ba+mLNW+HpEYPNCEmVy0bmA4+DtsbpMuzKPvyCJlmg71PvBR8gP4pAqMZGpiL3veKdAE7fovmn7ah0hT3xaLOBEUMYnCsxea7l97cIBg9Xt366rSBMMx2LoeWBL96yMQzb0aJx/7mhHNk+1Fh9Jqt8fBgr4DIk+nTzzuIpdpgK/PbV0o1h9fTf8QbBL9GDnI2TS7y+ItJ9QYg6ATGTKqKvlUEE7xr8PQaW8raZrQLOvSBI4UE97JRnwSIg5InwC4dJ8Q0oc2ExuqKEUSK8=',\n                t: 'MTY4OTEwNjE3Ni41NDUwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'Wzm8/VFLcicJGkc3iEfBAOSRuhOX472pQSGCCj+6rZM=',\n                i1: 'BWhspgnRyaLAivYxPTkhlQ==',\n                i2: 'jusEYzhVkiRuoRxkq61CaA==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af6358961a1d';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/logout\\/?__cf_chl_rt_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "50", "inputVector": "", "url": "https://jable.tv/logout/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "110", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "50", "inputVector": "", "url": "https://jable.tv/logout/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "111", "alertRef": "10035"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "54", "inputVector": "", "url": "https://jable.tv/login/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "112", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "52", "inputVector": "", "url": "https://jable.tv/login-required/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://www.w3.org/TR/CSP2/\nhttps://w3c.github.io/webappsec-csp/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Report-Only Header Found", "param": "", "attack": "", "name": "Content Security Policy (CSP) Report-Only Header Found", "risk": "Informational", "id": "113", "alertRef": "10038-3"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "50", "inputVector": "", "url": "https://jable.tv/logout/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "114", "alertRef": "10096"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/login-required/?__cf_chl_f_tk=5H7X1ytMIzP93LZex8.IGOQBYaPZFWa56Ru8gJ7WUSQ-1689106176-0-gaNycGzNDRA\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "52", "inputVector": "", "url": "https://jable.tv/login-required/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "115", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/login/?__cf_chl_f_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "54", "inputVector": "", "url": "https://jable.tv/login/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "117", "alertRef": "10202"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '27485',\n            cRay: '7e53af637b84833a',\n            cHash: '97b00139e24b53f',\n            cUPMDTk: \"\\/login\\/?__cf_chl_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9sb2dpbi8=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: '6DMscW5FtThHnBJR4W8YFMoNHGueTwCnEhHWXq2bHilCM71aVEJBFbq3h+0p4KJ5oegcnW1OG29eNMbpqtGjzeWA9a+Jwr4BxHD2O6yeUgjez8bK9jr28HgbBUb2SIgllPxCY7IBn8ryeuNbgp9rijgvDfOAqf88Pp63ixr2zOyeWDkpgpqezBV9LDgsAmIyRA2PV9K4cdz1bfXwJO2Gr+hazYt2ayXEh+T6FW2LJN6UJB7Yb8TSYAWWRSuMjzMy1ZGXyk6hU4jlMa3ANtJHXqhwCeLRU5i1W8r71NKvPAt9uWvQj1eO6kDbuV3W3x7tPHHpilahqIo88qNN2eTukW0Tn4iT28n7ovWe1eoEmrhI/NzWQynQXFmkGa3r8wSM3+yxah8D01fYJBKbhlag+v8hQTkkZd5QLgScnzpKBcqVh8GmOZB/hxZN6CeettjP4dK6oV8fq8VO821srC62LFfBsT8bi+PS58LaN0FeoD4AtI0EfZW7nYbhwY1IDoevBmbuVFNmVLi1Ect0O2xhWWF4IReG4AMkeefTZtMVk2I=',\n                t: 'MTY4OTEwNjE3Ni41NjMwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'Lo+/dhPHQJUo4Ig6y3GzeYI8ulJGI5Ws8LvdvCdhzso=',\n                i1: '/sQmqexzo8mceCh0bciMGg==',\n                i2: 'nH4YlmcGeYUITT/KEiaQVA==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af637b84833a';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/login\\/?__cf_chl_rt_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "54", "inputVector": "", "url": "https://jable.tv/login/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "118", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "54", "inputVector": "", "url": "https://jable.tv/login/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "119", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "54", "inputVector": "", "url": "https://jable.tv/login/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "120", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "56", "inputVector": "", "url": "https://jable.tv/payments/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "124", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '40775',\n            cRay: '7e53af6378a61a1d',\n            cHash: 'c7964e6bfe2d9dc',\n            cUPMDTk: \"\\/login-required\\/?__cf_chl_tk=5H7X1ytMIzP93LZex8.IGOQBYaPZFWa56Ru8gJ7WUSQ-1689106176-0-gaNycGzNDRA\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9sb2dpbi1yZXF1aXJlZC8=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'oJLh8ANIFMSY6wWdKCRih7QCuJhIW4BpWY8tUpKJW8k5FvjJupJzhdDNBltjSjRoP4eRS/gHgcyZxMLAOtafFFpvtkBL0o1ToFeS8FpPvuScTBPq76TyPa4lB9xE74e2D+zrXIwrpcZrI07iw4/dr8MjHYIuZO2S81eKUr3m6R1vp/L+uqbX7TCDpju3g2ME5mD5oa1Ma3/aRsESY3pPtbFKP2XUDrXeIPq/EhaGW0IYHZDJGik95jR1Mh6Hyt5LzUj2X1UpAb9ZaXAy9a3EVjgLc7H6W1ryxWDNvqOzkdltTKLPvmbI+OB80saf1gZpGWDDUemkefJEkDUVMVTZ8Qb3hP0eMU849+Sn3iTHBKm8xgBFUi9+fJV7nflBchSogmn4Sm9zh8wWV+Yf0ro3XkGhVXl+FvAK8yXzDHy9JmUBxwjLxMiTRM+1gH8Gs3T577scyhHR7eWKCAIn16zKwXSC8Yr8gBWAjiwZKjH/DHyvm5ojIFZOptpnPDDreinordquqTpW30npiuSrDIE8bcnKN5UqsEPkPGehEDxNbYc=',\n                t: 'MTY4OTEwNjE3Ni41NTgwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'PfVOzKzRp8Sn6bXmFaq0t9HGfL/MJ57l79q/exjT4/o=',\n                i1: 'PgcFQNj1cJz7mU3agEhIsw==',\n                i2: 'hIANnVQTrFG3IBm2a447VQ==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af6378a61a1d';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/login-required\\/?__cf_chl_rt_tk=5H7X1ytMIzP93LZex8.IGOQBYaPZFWa56Ru8gJ7WUSQ-1689106176-0-gaNycGzNDRA\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "52", "inputVector": "", "url": "https://jable.tv/login-required/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "125", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "56", "inputVector": "", "url": "https://jable.tv/payments/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://www.w3.org/TR/CSP2/\nhttps://w3c.github.io/webappsec-csp/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Report-Only Header Found", "param": "", "attack": "", "name": "Content Security Policy (CSP) Report-Only Header Found", "risk": "Informational", "id": "126", "alertRef": "10038-3"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "52", "inputVector": "", "url": "https://jable.tv/login-required/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "128", "alertRef": "10035"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/payments/?__cf_chl_f_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "56", "inputVector": "", "url": "https://jable.tv/payments/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "129", "alertRef": "10202"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "52", "inputVector": "", "url": "https://jable.tv/login-required/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "130", "alertRef": "10096"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '52296',\n            cRay: '7e53af638c768379',\n            cHash: '226459c56e85e09',\n            cUPMDTk: \"\\/payments\\/?__cf_chl_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9wYXltZW50cy8=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'fpmLTTD6zNIyRc2nXCa0yyVkCHR7eMn97lDVy80tUZXMuozEZY1bJ4ZSFpAs0J7R7rXs3mZ9zlknFgGhO4gtrEkZ8Ujz3grDW1Hmk3Qb+KgFGGIYrSLTQQjNyQH5JYpSLUNN35XhfM6iAja/MfW6rWIy0spVckEi43YexFUelyPePV26ALZ8OAYK/LwP0xgTenT20NkbFqchruEbz48OKtUkjza85mdDMqpzRJc1kWQ0w1K6aK27QO8HpNF6OaofruUGs9LTzjepwLSnyl1Tt7cqr1hnVX9bMbeTkX+y9a3JcDJoyyHPeUdJjuVbDRRUmcKmlZ9eG2FgcKO5BaqAEriinNmS+sYI3VtYz5aDz3PBnfumIWQNOkjZSrCYSDZOIlga5WsCtbWpmpzDe+J+NZtuHJdhTmqK4As1Z3V06wJQ8RhB9DX7UT7JeTGjD7IphiaRul9FAdxpsCNOcLrDMlc9koTi+Lko/K1Yvx4cgQNWGknoqXh0O9L9dUS8NFnSx7HlMIvePi8JSGplm4hM3DxqV50R1QntQkPJ5ksbg4A=',\n                t: 'MTY4OTEwNjE3Ni41NzAwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: '3QQMXBAve4qexYC6LUXlLDkRSgdxmkDjn47zJiepMz8=',\n                i1: 'ILXSWT+jJUJEbHeK+HQCCg==',\n                i2: 'zanhMoYlbbF6SHlBEoRYSg==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af638c768379';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/payments\\/?__cf_chl_rt_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "56", "inputVector": "", "url": "https://jable.tv/payments/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "135", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "56", "inputVector": "", "url": "https://jable.tv/payments/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "137", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "56", "inputVector": "", "url": "https://jable.tv/payments/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "138", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "58", "inputVector": "", "url": "https://jable.tv/signup/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "143", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/signup/?__cf_chl_f_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "58", "inputVector": "", "url": "https://jable.tv/signup/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "144", "alertRef": "10202"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '49631',\n            cRay: '7e53af6419728351',\n            cHash: '074d7f8e0abdbba',\n            cUPMDTk: \"\\/signup\\/?__cf_chl_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9zaWdudXAv',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'uC5D2JHO7P2r6d9HmKH42skykKPwWjD/7q56qDWoe4lQOT/tDL1LBzODjXwvQECCg/THHLho/+DmJmy4GLuEf2H3Y6GFNnu7xo21Tshvz5L809dgdvuS0z1fZEbQX6meureM2xstmoCTQ/i6fsTRXYt7ktUgU1fT+p+KRZkpkvGfTtm6CpOn3e/ZAZW92mC5palE+iH1Wx/kbUFKqcwttIm/By7ol8nMHMK6DUNUNDNd2aT7ZuvfRIDO1A6jc14VVFsb65ZNgVewI97wr2aJEid8fBGSp9+DdbCW5ur8A9S4JJeCcLByEywE6FIX8Tsvhpu0dSn48YGS1YnEdSbGnlBVZV+TE9vRnd+eIB3xGJHt7HpTwXM2xxrPbL6OBm5gy+Nz3G7grm4RX9Z7iEvcQlX1ewJdo6PecL+GVDmVN3uaGsjS/mTsEn2M6G0ol7RYkIkLCHXhcCzzcWNzmyP1cMdH3HLVDHKtCkkfUc6zR7DMezICxIGSBaedK0iHWlo+ReMnY4T94rynLoeo/1LQ55qSQbDQNw1RpyAmz/Vy7yA=',\n                t: 'MTY4OTEwNjE3Ni42NjAwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'vuTSoZPWoaf8QzjB9hmuil+mKI6uFyRLpkkLWLx12IQ=',\n                i1: 'NjDGEJ+dsgolBYYX9lyk5A==',\n                i2: 'rCvPqMyx2bFQFWh5rDt4EQ==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af6419728351';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/signup\\/?__cf_chl_rt_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "58", "inputVector": "", "url": "https://jable.tv/signup/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "145", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "58", "inputVector": "", "url": "https://jable.tv/signup/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "146", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "58", "inputVector": "", "url": "https://jable.tv/signup/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "147", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "60", "inputVector": "", "url": "https://jable.tv/upgrade/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "151", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "62", "inputVector": "", "url": "https://jable.tv/reset-password/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "152", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "63", "inputVector": "", "url": "https://jable.tv/resend-confirmation/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "153", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/reset-password/?__cf_chl_f_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "62", "inputVector": "", "url": "https://jable.tv/reset-password/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "154", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/upgrade/?__cf_chl_f_tk=Xxd3XdmfNzyqOaOf39uZNCzUXbNfgJ89Vm8DK00GXkI-1689106176-0-gaNycGzNDPs\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "60", "inputVector": "", "url": "https://jable.tv/upgrade/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "155", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/resend-confirmation/?__cf_chl_f_tk=17csY6gk.3bu9bH..G_9HYWsIFNWBMViVUmcFEPUfSY-1689106176-0-gaNycGzNC5A\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "63", "inputVector": "", "url": "https://jable.tv/resend-confirmation/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "156", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "66", "inputVector": "", "url": "https://jable.tv/feedback/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "157", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/feedback/?__cf_chl_f_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "66", "inputVector": "", "url": "https://jable.tv/feedback/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "158", "alertRef": "10202"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '49601',\n            cRay: '7e53af654adc19e6',\n            cHash: 'f494a1fb932f6e1',\n            cUPMDTk: \"\\/reset-password\\/?__cf_chl_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9yZXNldC1wYXNzd29yZC8=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: '3YgGEkPFCjs2pvzSrb9dRZ0DA6jqdxlyaESSjPBBIhh81Ag2Np0Fwrlcs65wan9xynp89rdYGZn9UiHfyciD5GHb58kRKhNp9ycY95BJTSokWQ3j13KpfXnVM8N34pMURlm0THTXlnV4ORR7irD3771iAJvsDsbA84OArjUOdkkVkf2HS+AUtBQ+REuS+BcYIInj74YUEqQCmN7xeXEECK2YucEpqxSnK2J8KkkeuFvFbWfg21pqR3njNkq8vSRJC4v2ijgEu8XumERGqsRtpNORy5lJxqHuOoTHS3q8uhbN8nJnEWNUBbQdepCQOf6grMc0x8ll2fRL3AwqA+3zeCBT6t+kFb8tF2u8pG/AdHKqz5YQ7mUlW2P/P/JWTL06EkBwjs3WVzT5WIzjsqrdJJzZdYZl8u2wLsVg9xKoGZ/9noqj3bC4/5XdSN0f7anb8M2IV6fSFkg8cGRItYmPnaW/sIBHkLl2JC7WFUfwT3jcOmd483LLzeA0OXDKfcO8Ms4KxKd+2PeJyEM0YI/PU8e7Z5qKIVQ/Su7JxscYw0w=',\n                t: 'MTY4OTEwNjE3Ni44NTIwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'UyyYzeJTEERbzklkcTQS8EqrtRymIYAqQMioTX5NQK4=',\n                i1: 'T7WSAY9VLKGDJudn2unekQ==',\n                i2: 'kn20cypzTl8BqowPEMfn2A==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af654adc19e6';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/reset-password\\/?__cf_chl_rt_tk=O7UCDaM_2HFqE70ZRPHzv50BZ6YYsKJZQofYcgAtXzg-1689106176-0-gaNycGzNC2U\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "62", "inputVector": "", "url": "https://jable.tv/reset-password/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "159", "alertRef": "10109"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '45400',\n            cRay: '7e53af655c9e8cf4',\n            cHash: 'd2161272fed992f',\n            cUPMDTk: \"\\/resend-confirmation\\/?__cf_chl_tk=17csY6gk.3bu9bH..G_9HYWsIFNWBMViVUmcFEPUfSY-1689106176-0-gaNycGzNC5A\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9yZXNlbmQtY29uZmlybWF0aW9uLw==',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'g8tCnNid+qS0G+YEuCCzMWTdonQ2dyckcYERFbWsOmwiqdfBWIsCAWkkw+Khld1Ep319U5tICTb7wokL08DMhjTdoOD+tac9ieuJv2rWz3rv3wufAGcRXYEbROxAMcWeid34m1FfFdjJ/nNCyewSjpqv5gGP6c7/upX09M9dfSNFp4SlqnAwvVfeQBduWv4fe2LMd98ZaEbsw3CpedYd3M4caxPQ5eJ4y3xWyGe/hIPB7qMkt01y4zwfT2VP4B4PHooWPRvwuOatIyBQTIvyepOIzbzlHDEFjhJ8pBJHGWR4lNJ4llvz7Aiz4I7a5lqHf3qeSFKBcAC1KfC+U/SODpiMRBytA+qGTl4bUZzz6WqUoA8S6FytetT52WgqbCTE4iFPYhQj9F/VGw7vb1ETqIDfoHtbWKsDjsOTTCK151TMsskpOr19ESFnzZSMbAepGw7wnwiVe+yj/723JwAxnk3DQPxYcCBFALZshpE5nGsVqTHSgipbe2iht4UpJjs+0ldRCxwSQrVLeBjTMrvi17SWjhKq6UJqxa/0ly4Y3h4=',\n                t: 'MTY4OTEwNjE3Ni44NTgwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: '1vcpGeG7zW7PKn+j62LG1/x77x09eFdPtyoMODeJKy0=',\n                i1: 'G5Mj90tQ7RF/r21dZphs9Q==',\n                i2: 'qwiTa2Q/Q1OqHE8S0NPqMA==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af655c9e8cf4';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/resend-confirmation\\/?__cf_chl_rt_tk=17csY6gk.3bu9bH..G_9HYWsIFNWBMViVUmcFEPUfSY-1689106176-0-gaNycGzNC5A\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "63", "inputVector": "", "url": "https://jable.tv/resend-confirmation/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "160", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "62", "inputVector": "", "url": "https://jable.tv/reset-password/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "161", "alertRef": "10035"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "63", "inputVector": "", "url": "https://jable.tv/resend-confirmation/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "162", "alertRef": "10035"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '98422',\n            cRay: '7e53af654bce8cef',\n            cHash: '483bfe388736e13',\n            cUPMDTk: \"\\/upgrade\\/?__cf_chl_tk=Xxd3XdmfNzyqOaOf39uZNCzUXbNfgJ89Vm8DK00GXkI-1689106176-0-gaNycGzNDPs\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di91cGdyYWRlLw==',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'CgAjPuVuoLMr8PG/7kaCDuBxDaex0zzZog8yTt/Tu8YQrTlaK1GoF7yTT5vtXbzAGa431ExxPmMlS8BEAhFoN8cdbmnhItWCgUPggBXIJnS69ywg5GJBnpIWPjafYalDbjvjTQBhU2oP3kdEXhB12jWSVhXGX8er4xzxpHyJJyK1O5pYi3r7OcVRP4tmmpAFVvBX/Lkjj4RE3ahhXV9I2TawulJvlvBeFNaTi4OLlFuBQT+c752ej8pt2TrMaaeoME99E3TOLueSVdSoBme9JX2piBIWhowHfi/FBUr7vTjOXKSAPhLJjT4E7IOidkiYQqP83cw5YXbd0nyxSnLaQGzu8C3CmPo75h3fD5riRUuqJYZ/FCjx9AWQi6969bGOAyF/tASJ7ySPfgKR/iZmEigdIK0lQyJNHOg4kUPBRTmuiDUypNAGxvGvIciOvQmkJXWb89zkFyaKiQ2kclF+NMPVrSmWZxU7cvp/QwT/1mAXTZdWgD2xTgimJOQFMgy8vtORGkQMUPjIwenQ/MqHTjdw6v1rbxxWfdpqXTW044A=',\n                t: 'MTY4OTEwNjE3Ni44NDYwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'TZ5FafCvuEJh1xF7fhMj45OE9zBZud3J61jjoeGP0fQ=',\n                i1: 'I2F4hAlgEqQiHGadQzm00A==',\n                i2: 'HMR1BJ0StTPNI516FwiOtw==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af654bce8cef';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/upgrade\\/?__cf_chl_rt_tk=Xxd3XdmfNzyqOaOf39uZNCzUXbNfgJ89Vm8DK00GXkI-1689106176-0-gaNycGzNDPs\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "60", "inputVector": "", "url": "https://jable.tv/upgrade/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "163", "alertRef": "10109"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "62", "inputVector": "", "url": "https://jable.tv/reset-password/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "164", "alertRef": "10096"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "63", "inputVector": "", "url": "https://jable.tv/resend-confirmation/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "165", "alertRef": "10096"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '31537',\n            cRay: '7e53af657f381a35',\n            cHash: '5ad97d99fa59e79',\n            cUPMDTk: \"\\/feedback\\/?__cf_chl_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9mZWVkYmFjay8=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: '4jq2PyyqgSg8F/HmfaIBMZOce8IOVZzi1UgpM6UEMTCK6zQ4EX7Kk+0PmRIAfC+1aXHtt6V2unMoYKVcIcYi0gnYv2IX9QfWti3WjlKYPUUx+0DCUmu7OzviKTKY8obttS5kvpF/X8VZoEcPp9MV8jjBp4Xw3JFpNRBhG+dHiyqOpQkqu9CfGVKIDy0BdfMX1qo49/olzRSRSG0MUkN7bnYFqpZmwdN6cxx4Y32rPOtgSo3e+jA730I28UyZEOUHGvke8NEj5gJlUjX2LayCCQaFNxQVjtU5PUYiSVOB8dId1BvhmT/sJQAnKW2+08gnSa+LFwfkgZkOqWwwbcmpV3d9OAsGBXqwNvrUyQRrMQuuGp8800OImld89eDsokVvrCu8ai7Q51yYoXR9JF+1HvqIXQ5cJqcRROrfu3QT4Se+4947uYltzuV4/dQxes0XlCO2/kxuIkPttFPQmrB4ippFa6LEQ3f1bh7x7+fU0+aiQgtGsSJyzSg1gE/g5cznG6liHQVs/U6fF5OW3m/mogKGgGXns2w1ymPqOemwHUM=',\n                t: 'MTY4OTEwNjE3Ni44NzcwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'oiFwt5CILdFOvTqFWzMUXFCPdKp264KnWfnJ6R/DUSo=',\n                i1: 'Kft61ZvUg2APwYiq1mrMpw==',\n                i2: '8GBjynwwEw0h9zVvnly37w==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af657f381a35';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/feedback\\/?__cf_chl_rt_tk=Dzaw5B_ddjd9FUIuO6DCEjDpZ9xh569h_YM0x7huFP8-1689106176-0-gaNycGzNC3s\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "66", "inputVector": "", "url": "https://jable.tv/feedback/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "167", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "60", "inputVector": "", "url": "https://jable.tv/upgrade/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "168", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "60", "inputVector": "", "url": "https://jable.tv/upgrade/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "171", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "66", "inputVector": "", "url": "https://jable.tv/feedback/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "173", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "66", "inputVector": "", "url": "https://jable.tv/feedback/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "176", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "68", "inputVector": "", "url": "https://jable.tv/invite/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "183", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "70", "inputVector": "", "url": "https://jable.tv/categories-selector/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "184", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/invite/?__cf_chl_f_tk=8CfFGhU8jppX6RCKMdPowPZ7bpI4ae9PdJw7BON8xW4-1689106176-0-gaNycGzNDOU\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "68", "inputVector": "", "url": "https://jable.tv/invite/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "185", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/categories-selector/?__cf_chl_f_tk=17csY6gk.3bu9bH..G_9HYWsIFNWBMViVUmcFEPUfSY-1689106176-0-gaNycGzNC5A\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "70", "inputVector": "", "url": "https://jable.tv/categories-selector/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "186", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "72", "inputVector": "", "url": "https://jable.tv/captcha/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "187", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '35564',\n            cRay: '7e53af657b50834d',\n            cHash: 'c94505c2b5e502f',\n            cUPMDTk: \"\\/invite\\/?__cf_chl_tk=8CfFGhU8jppX6RCKMdPowPZ7bpI4ae9PdJw7BON8xW4-1689106176-0-gaNycGzNDOU\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9pbnZpdGUv',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'xjgAf3cclxNnriLy3YEgPHuwAEMFWPu2nIEUrjyOFov262+2DscQQS6QlsbJwBJpKcft5YuvBmEqzwQesx1ykfqAv6uIp4gD1r2c+bLNtge6Qtlacb37eUo+0YG7IhwEgnxr0cHGc82L89sT3bQaGa4RJcDZqBMa4+snQx4MLiAgLR4O1XEe9F82nXWp8/V2QFKEdEOdt/VxQjfzyfRld24fKGb/FEc638QO94kNnUP1pm9edotfU/X4ef3B0yPzUbweJSH0SIwyoZIjIX9orgecNd2uNgNU5Y4o0d3dEN4EreXqPgIROAzunePAdVsqIZgpT0oIU1J8kqHexgfD1wNaHbhON8lm1yBFUqDgLXKL9aFATG8L5CJrB7PSruKdutEP0kXSjtlD9He1+FiVnvwTQ8gxoSLuVhKrx/y2g0Hf1bq42J0P4ocJyEgyp3fK28rNb0XlrIFyKQJIHsHajCXjxapBLApLDYzyfVX1DXwvGeSqmBUxsMQfF60sqhsAEzxkVe/koq3J3svZXpReJER/Smm39RT02Q9Fn9KwubM=',\n                t: 'MTY4OTEwNjE3Ni44ODAwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: '0CqwjaFuiHKX7Ww2+U52/COY+zH/EbkTkG4oHOWb8s8=',\n                i1: 'kIFKTGc/MAQEsih+JFt2FQ==',\n                i2: '7NIcsnB3TyV+t7mzAhdshg==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af657b50834d';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/invite\\/?__cf_chl_rt_tk=8CfFGhU8jppX6RCKMdPowPZ7bpI4ae9PdJw7BON8xW4-1689106176-0-gaNycGzNDOU\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "68", "inputVector": "", "url": "https://jable.tv/invite/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "188", "alertRef": "10109"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '57354',\n            cRay: '7e53af6608c119c9',\n            cHash: '5f610aa671a3e10',\n            cUPMDTk: \"\\/categories-selector\\/?__cf_chl_tk=17csY6gk.3bu9bH..G_9HYWsIFNWBMViVUmcFEPUfSY-1689106176-0-gaNycGzNC5A\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9jYXRlZ29yaWVzLXNlbGVjdG9yLw==',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'dI6rVXe7qXqK0JtbFOHXsDitxMgJ2Pv0VahJhmMVvhLCTn0Hmosc5o1vfmWSr9J2vcmD7wJO0p3W03AFRuuO4p8B4QFqeT67TS540d9b6SkvPXC3mEtq1X3/Li5ikcZvaASSXYlCtDmvmgAbN4mrGarWOupqTTmzfMyJSszgJMuIvHRhfclxUbTr1FtQLyptGTSK+Qe2HDUtnmODGJMxBcP3wcqONMXNzUzNLqlfsK5g4BLzorgjlrh1jA97BZYE1fl8pGs/uxO7AMSw9DN8VDH/KLaXsNE0gOJPrlAP3uqlm3b67bZzxMqolNYScmTMnsgiQ7tHCg6+wolecnmNpd0jtL4rM1y0QsLNSvLCSlb7YMaYL5VZgJuNCCsTdv1Yaklny2qHXj9aDtbSdV2baQ4eVvj0Nxs0FysaTnS/cwEeyhU+1fjrnKl+enpyBlr4KbWn1IsGipR0CIsj89B1t5BkLFaiwchGiifkC5O+vLoisuqRuFH8anRruP+vgimDbF4uJnr1bro7q8tTXt5MJwEnF+KYVOqZE2F3rO3jyNQ=',\n                t: 'MTY4OTEwNjE3Ni45NzUwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'KBvIG4abUi52QX5tap6cZo+qIfmoerD//ggPAfiaM+0=',\n                i1: 'XiRaj6QU+21QTOFwoPeuKA==',\n                i2: 'P/meawhO94R+N/5P68YcZQ==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af6608c119c9';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/categories-selector\\/?__cf_chl_rt_tk=17csY6gk.3bu9bH..G_9HYWsIFNWBMViVUmcFEPUfSY-1689106176-0-gaNycGzNC5A\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "70", "inputVector": "", "url": "https://jable.tv/categories-selector/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "189", "alertRef": "10109"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/captcha/?__cf_chl_f_tk=.nAOKnaKFzPFCb4y0hkRizN6KiS6McuKmhIINwXsVWo-1689106177-0-gaNycGzNC3s\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "72", "inputVector": "", "url": "https://jable.tv/captcha/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "190", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "74", "inputVector": "", "url": "https://jable.tv/link/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "191", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/link/?__cf_chl_f_tk=ICfN.wPP2nWIZv.9GOYglKJUmxSx6Xpm9iW8FNT.GIg-1689106177-0-gaNycGzNC2U\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "74", "inputVector": "", "url": "https://jable.tv/link/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "192", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "70", "inputVector": "", "url": "https://jable.tv/categories-selector/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "193", "alertRef": "10035"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "68", "inputVector": "", "url": "https://jable.tv/invite/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "194", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "68", "inputVector": "", "url": "https://jable.tv/invite/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "195", "alertRef": "10096"}, {"sourceid": "3", "other": "1689106176, which evaluates to: 2023-07-12 04:09:36", "method": "GET", "evidence": "1689106176", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "70", "inputVector": "", "url": "https://jable.tv/categories-selector/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "196", "alertRef": "10096"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '29951',\n            cRay: '7e53af673c701a15',\n            cHash: 'a82ddfe34e2b0dd',\n            cUPMDTk: \"\\/captcha\\/?__cf_chl_tk=.nAOKnaKFzPFCb4y0hkRizN6KiS6McuKmhIINwXsVWo-1689106177-0-gaNycGzNC3s\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9jYXB0Y2hhLw==',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'w8K31DbdgB05UxhLH3dMX4QqVXh36lVl5QzFdv/ApTT81uJwaglDxk1lllI5LvdJmwHm+InA4INabPzVctpRxAUOLGmJMCxXTFSFBoBnbtzP2J7isfuXzTdPXWUTRYaJmInodDhJjN812jUrANHV/WxF7FUSRdwsLpWMQzzZnu9EJP1duICKcsiOMC4m6FNsaEbk1iIt0cr9FB/ogMilsaeM89oY081iKly+bhKOLblZHtxG53HAqwAQd/QyhOUDr1+q94/j+0qvzJOW+Rpz50aAO74fZWJ6LAV0XQ/735xlZTDBcOe9pPtUCPnJ9b248/Y1FmficG1Lckt2eMwawIq7i4iFpNty+qTKr3jKOCRpsQm2s9wYHwv0A129lkrdnu/YEGtobLul+No0jnfqS2TnAI0Uqa26TP1OGn2fKx0a1abGDS/f44zmW8AaYNj/U8ZuJ+YyrmaKZePaOaUMTQdTl8xNWNXG4r4umZKm74AhZaFvG8WyWSYD5noml5g3A3mmn6fMjGALrwJEL4NrVAs3Gsp974yBarwXbMHrB38=',\n                t: 'MTY4OTEwNjE3Ny4xNjQwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'aWiDnbZzNqI120NRw2j3WXJOR+9/qrZBi8j6GaGYWjw=',\n                i1: 'htrnogjzIX4uM/Nc+bLh4A==',\n                i2: '/iO9b0C6LpGEWQvjmpe3Cg==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af673c701a15';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/captcha\\/?__cf_chl_rt_tk=.nAOKnaKFzPFCb4y0hkRizN6KiS6McuKmhIINwXsVWo-1689106177-0-gaNycGzNC3s\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "72", "inputVector": "", "url": "https://jable.tv/captcha/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "197", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "72", "inputVector": "", "url": "https://jable.tv/captcha/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "200", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106177, which evaluates to: 2023-07-12 04:09:37", "method": "GET", "evidence": "1689106177", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "72", "inputVector": "", "url": "https://jable.tv/captcha/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "202", "alertRef": "10096"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '35805',\n            cRay: '7e53af674ff38338',\n            cHash: '55133ce3f5fa2ae',\n            cUPMDTk: \"\\/link\\/?__cf_chl_tk=ICfN.wPP2nWIZv.9GOYglKJUmxSx6Xpm9iW8FNT.GIg-1689106177-0-gaNycGzNC2U\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9saW5rLw==',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'Qj1hfuBr0OqBiMX09jt+vedXTeTiShbEeJThFgn/0MmhLY8v85BVaOpCcDaUyek75XQiU5mkmZ2eYIsEyErV3oDkYohTLMBCrQwCPE/cI9sn1lyGU27gmHkv68qcdJVSkrLGsy1g2GJPOtMqJrcK/7ub6m0pNGw+9fQ6Uo9ZkhP6xXOVQos9dt3xFURNo+sowLZmqygrCBJn+rcECex6zivDZ4MeKtOq8/MP6rFKVLc1/eMrvGXM45rdq0vQ92VWSaffz/7p7UW8CLT3UptQbawBMh7MH1RZmjP8+FaXS3T0A14dh8OH2/q+roajTrwycmaiMfjY4vnoB4hvsXfwDDO4mb1XkGi3bGVYYSYpO2yYtTlwHr/Ds5c3JsbnM/cUNZJr8pvfedfT/hy1NnBdjlfcv0Yg/B5dpLZYOpVS19sxldWinwM6nKUodw6Nnwhuy9gbxNjp3GwBYfPQjXQUo3596MWTmeFnFS45Rr3HWL4FdFSNlL1B+WnMmGcRAiSbOIrd0Hr2nrAuUwfYtHozs07Qt/GC3OiVJX+ji8Bo+b8=',\n                t: 'MTY4OTEwNjE3Ny4xNzUwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'zG0iUX/IjRVvXX48WBCSHohiqaBLzVVX4okW0Yhbacw=',\n                i1: 'VctRlAUUXqT0JwOqb8yIrw==',\n                i2: 'sljZ1KkWQ9myukEdG1yz5g==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af674ff38338';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/link\\/?__cf_chl_rt_tk=ICfN.wPP2nWIZv.9GOYglKJUmxSx6Xpm9iW8FNT.GIg-1689106177-0-gaNycGzNC2U\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "74", "inputVector": "", "url": "https://jable.tv/link/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "203", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "74", "inputVector": "", "url": "https://jable.tv/link/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "207", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106177, which evaluates to: 2023-07-12 04:09:37", "method": "GET", "evidence": "1689106177", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "74", "inputVector": "", "url": "https://jable.tv/link/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "211", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "75", "inputVector": "", "url": "https://jable.tv/models-selector/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "215", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/models-selector/?__cf_chl_f_tk=PaevPT6x3leYarska0qTCMqTxiw_U.Xn6TdjSBgo54U-1689106177-0-gaNycGzNDPs\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "75", "inputVector": "", "url": "https://jable.tv/models-selector/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "216", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "80", "inputVector": "", "url": "https://jable.tv/embed/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "217", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "78", "inputVector": "", "url": "https://jable.tv/related_videos_html/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "218", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/related_videos_html/?__cf_chl_f_tk=_qo5A0m0wYZ56CezKafm.4MAfNKx0ikJ31NdHBnQPc0-1689106177-0-gaNycGzNDRA\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "78", "inputVector": "", "url": "https://jable.tv/related_videos_html/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "219", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"md\" ].", "method": "GET", "evidence": "<form id=\"challenge-form\" action=\"/embed/?__cf_chl_f_tk=ICfN.wPP2nWIZv.9GOYglKJUmxSx6Xpm9iW8FNT.GIg-1689106177-0-gaNycGzNC2U\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "80", "inputVector": "", "url": "https://jable.tv/embed/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "220", "alertRef": "10202"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '4500',\n            cRay: '7e53af674cc719c8',\n            cHash: 'f7da89819b19aa6',\n            cUPMDTk: \"\\/models-selector\\/?__cf_chl_tk=PaevPT6x3leYarska0qTCMqTxiw_U.Xn6TdjSBgo54U-1689106177-0-gaNycGzNDPs\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9tb2RlbHMtc2VsZWN0b3Iv',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'fMG7p7cTmIbCP4EGA/PpExC9j/7IEy8XJJIQT+VJXwfOekmAQj+HEqeluxkenfSF40tEHSHLz1xkmulLiaeUREB8esVC0Jo4nY16s2fMoU4cOCSQBhFfGbqir3PyAr4H7EEhVRe1J+GoR3/zrrUIBcA3Umx0+3yTRlaTCfaLTzPFB2T5yuY0QN+1q0cMkP/IV4/DMBtc81U0LGBHz79T4nsGy0yib4npAhkg6kPmU/4pyZZKr1Vx32uiYNhmVmcoDVvu6qo5hR9w8Ysc3aQnnKycoU5yA1a98rjdF5rWJxTkrhw2xCrR01vCDf63bFyQSAmXo+3e1poYtsnOERrq7KzFWtEmfEn8rS9TxgXXzpZfzyLcfhK6urA7ij4KkkNZ2nrX1dooXM5++jliIlk0eJ4hjhFogdXRGXwQIBHgxF7wTLdOxdmwEzSPj3znp+lSXFSmtuJN67tEW4XAAVWtOaOmtGIQk8OFA1DAXsCocCTJg28/l3Ftpctdl4tLZ/cHEn+tWJH87EFspUa27MDPBDKNQExQhSTFvHWt6wF0CUc=',\n                t: 'MTY4OTEwNjE3Ny4xNzEwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'iqH4bWY3KUMF9yPQjtTlk39Zq2PkOU4p6HvFR/GrseA=',\n                i1: 'FZNp2gsVbkrwLID+C9g/sw==',\n                i2: 'Xm7FQ/BCpuFTSCgK4jOCVQ==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af674cc719c8';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/models-selector\\/?__cf_chl_rt_tk=PaevPT6x3leYarska0qTCMqTxiw_U.Xn6TdjSBgo54U-1689106177-0-gaNycGzNDPs\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "75", "inputVector": "", "url": "https://jable.tv/models-selector/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "221", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "75", "inputVector": "", "url": "https://jable.tv/models-selector/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "222", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106177, which evaluates to: 2023-07-12 04:09:37", "method": "GET", "evidence": "1689106177", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "75", "inputVector": "", "url": "https://jable.tv/models-selector/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "223", "alertRef": "10096"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '70133',\n            cRay: '7e53af678df919ed',\n            cHash: 'f9ba63bbfb30ac4',\n            cUPMDTk: \"\\/embed\\/?__cf_chl_tk=ICfN.wPP2nWIZv.9GOYglKJUmxSx6Xpm9iW8FNT.GIg-1689106177-0-gaNycGzNC2U\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9lbWJlZC8=',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'urMLJynqXcAh8Jy8ZqJl5oE0xQiHy7Qfk0DcK2XCIeUwhYYF6agyHd4BY6xOP7GvmOPlmCy5rXSRpnJ1i35BPOQ8mBX/EHQJuXUs1uw9NQdfIfY9I1UFwwsA+EASmVZlcprAyU2JCoGIXttiG2xpwKx6AizA0Ao1ESIOaaTUi0LuQwNBryzziUAQSHyk7FPsD137awh4KR6xcrKxypNxU+cVIh6Oskb7gK2kpGQ9M32wAWfPjXRB8EmxEEcoeqHu3EN+4W6SiA8b0Jc/yuA1LEt8m6cYjJv1CZJeUcQETlTAEgTvTa3T9Ym1T8ajNcTEtmU8fT9iyCLY1PozuAcsc06BHJxBoFOYz2/ENEfQJzzTCk/90uReyNnXnQ+5RifEmJkM0XCYaIXnPSnnPw2re0IPhSFPO6gsVJxRIjvZ5iKRg7aXWBK93KCMX1/0UgUhJpBUbndWM02cK0vHjx7YxVarizUDBOTOMJvot/Ao2dAgqICFt2n7PrMfI5dnU51n4JC24A2rmRXlY/WpFk6kqH4BhY1SJi+ajSpC5RQcprI=',\n                t: 'MTY4OTEwNjE3Ny4yMDcwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'poVGPFy+HmjQICWW1qG7+XASZ5f/oodppHB/rG5NzhE=',\n                i1: 'nbR9jmBZx9DlM5fdab30NQ==',\n                i2: 'ld2qqOikNEhkiIxDGAskxw==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af678df919ed';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/embed\\/?__cf_chl_rt_tk=ICfN.wPP2nWIZv.9GOYglKJUmxSx6Xpm9iW8FNT.GIg-1689106177-0-gaNycGzNC2U\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "80", "inputVector": "", "url": "https://jable.tv/embed/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "224", "alertRef": "10109"}, {"sourceid": "3", "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<script>\n    (function(){\n        window._cf_chl_opt={\n            cvId: '2',\n            cZone: 'jable.tv',\n            cType: 'managed',\n            cNounce: '11830',\n            cRay: '7e53af676b0d835e',\n            cHash: 'a308ee630ecc149',\n            cUPMDTk: \"\\/related_videos_html\\/?__cf_chl_tk=_qo5A0m0wYZ56CezKafm.4MAfNKx0ikJ31NdHBnQPc0-1689106177-0-gaNycGzNDRA\",\n            cFPWv: 'b',\n            cTTimeMs: '1000',\n            cMTimeMs: '0',\n            cTplV: 5,\n            cTplB: 'cf',\n            cK: \"\",\n            cRq: {\n                ru: 'aHR0cHM6Ly9qYWJsZS50di9yZWxhdGVkX3ZpZGVvc19odG1sLw==',\n                ra: 'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHg2NDsgcnY6MTA1LjBlc3IpIEdlY2tvLzIwMDEwMTAxIEZpcmVmb3gvMTA1LjBlc3I=',\n                rm: 'R0VU',\n                d: 'cdV1VLBvd1oEO6drb4bOzhQ52fxJc7lc6yC+bw+WLomSguxAwJPTHuKb65aj0ryU9lBifvvtPHXESBbsdmkRqgUwlJltC3/WBiOY7fin0uo/b/rPFaX9RipIDpCgoDskAqXRCj5x4cdanXwZT8YAeXTdyG6uTEb1ku935KdwHxEUOwn2LUzEIwnopHwQx1vn57ilrXHkWC6MnjWol9e0tsgasnMWMQybNl5B9AXR0oR5CCCqPDGxLya1BZgMrsWJsHpq2CAelNMrzMpna7OHQwrVVg6VG1vIheEal0nZFMsVN67qDJDjelK/PLW567WLQcGhst/b/1vEmMFAjV/3kSGNWkoWawlbi6x4ENcrrUUxIBUCXBQ86/OULg5SBmRfhtZeWI4pjql4u9e0Ye0swLFO6aPhKtiSwTqKz9DP3h+cASai+snXkBut51f2reO1jqnobocFKeWMk4wnH+9Dnw/HLLHshRn+ISfZW8QgN8oW/wTrxIgf0g8IYOQoL8MTMOF02+Cfo7Mz0twiKFdCnZCyLbbUin3A9Y0rArPvuPM=',\n                t: 'MTY4OTEwNjE3Ny4xOTAwMDA=',\n                cT: Math.floor(Date.now() / 1000),\n                m: 'c6jLSkCbthwmfdZpJIEtN5wsDNPSm2IIYB49OtxceGg=',\n                i1: 'Amxs8H9ZNBHc88765xzGWw==',\n                i2: 'jke0u/NPJHirgcRSHn0Dsw==',\n                zh: 'S5fplo+jki5rNgS2TZUI3kQ2cAC19kJ/rkvVZa/qCAg=',\n                uh: 'bA0Wbm6b/hCWHLxKD9MSnU50rATKgBwbSeBvBxJDs1M=',\n                hh: 'VxCNGRhgxtJABv5ZAxPfHnrqmGRcdVcw6eSI7uhyC/A=',\n            }\n        };\n        var cpo = document.createElement('script');\n        cpo.src = '/cdn-cgi/challenge-platform/h/b/orchestrate/managed/v1?ray=7e53af676b0d835e';\n        window._cf_chl_opt.cOgUHash = location.hash === '' && location.href.indexOf('#') !== -1 ? '#' : location.hash;\n        window._cf_chl_opt.cOgUQuery = location.search === '' && location.href.slice(0, location.href.length - window._cf_chl_opt.cOgUHash.length).indexOf('?') !== -1 ? '?' : location.search;\n        if (window.history && window.history.replaceState) {\n            var ogU = location.pathname + window._cf_chl_opt.cOgUQuery + window._cf_chl_opt.cOgUHash;\n            history.replaceState(null, null, \"\\/related_videos_html\\/?__cf_chl_rt_tk=_qo5A0m0wYZ56CezKafm.4MAfNKx0ikJ31NdHBnQPc0-1689106177-0-gaNycGzNDRA\" + window._cf_chl_opt.cOgUHash);\n            cpo.onload = function() {\n                history.replaceState(null, null, ogU);\n            };\n        }\n        document.getElementsByTagName('head')[0].appendChild(cpo);\n    }());\n</script>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "78", "inputVector": "", "url": "https://jable.tv/related_videos_html/", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "226", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "80", "inputVector": "", "url": "https://jable.tv/embed/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "227", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106177, which evaluates to: 2023-07-12 04:09:37", "method": "GET", "evidence": "1689106177", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "80", "inputVector": "", "url": "https://jable.tv/embed/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "229", "alertRef": "10096"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10035", "cweid": "319", "confidence": "High", "wascid": "15", "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.", "messageId": "78", "inputVector": "", "url": "https://jable.tv/related_videos_html/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.", "alert": "Strict-Transport-Security Header Not Set", "param": "", "attack": "", "name": "Strict-Transport-Security Header Not Set", "risk": "Low", "id": "230", "alertRef": "10035"}, {"sourceid": "3", "other": "1689106177, which evaluates to: 2023-07-12 04:09:37", "method": "GET", "evidence": "1689106177", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "78", "inputVector": "", "url": "https://jable.tv/related_videos_html/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "233", "alertRef": "10096"}]