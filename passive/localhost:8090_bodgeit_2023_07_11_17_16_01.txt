[{"sourceid": "3", "other": "userParam=username\nuserValue=test@gmail.com\npasswordParam=password", "method": "POST", "evidence": "password", "pluginId": "10111", "cweid": "-1", "confidence": "High", "wascid": "-1", "description": "The given request has been identified as an authentication request. The 'Other Info' field contains a set of key=value lines which identify any relevant fields. If the request is in a context which has an Authentication Method set to \"Auto-Detect\" then this rule will change the authentication to match the request identified.", "messageId": "3", "inputVector": "", "url": "http://localhost:8090/bodgeit/login.jsp", "tags": {}, "reference": "https://www.zaproxy.org/docs/desktop/addons/authentication-helper/auth-req-id/", "solution": "This is an informational alert rather than a vulnerability and so there is nothing to fix.", "alert": "Authentication Request Identified", "param": "username", "attack": "", "name": "Authentication Request Identified", "risk": "Informational", "id": "0", "alertRef": "10111"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "4", "inputVector": "", "url": "http://localhost:8090/bodgeit", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "1", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "14", "inputVector": "", "url": "http://localhost:8090/bodgeit/home.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "2", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "7", "inputVector": "", "url": "http://localhost:8090/bodgeit/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "3", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "15", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "4", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "15", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "5", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"password1\" \"password2\" \"submit\" ].", "method": "GET", "evidence": "<form method=\"POST\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "15", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "6", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "14", "inputVector": "", "url": "http://localhost:8090/bodgeit/home.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "7", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "7", "inputVector": "", "url": "http://localhost:8090/bodgeit/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "8", "alertRef": "10038-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "15", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "9", "alertRef": "10027"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "14", "inputVector": "", "url": "http://localhost:8090/bodgeit/home.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "10", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "42", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "11", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "15", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "12", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "7", "inputVector": "", "url": "http://localhost:8090/bodgeit/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "13", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "14", "inputVector": "", "url": "http://localhost:8090/bodgeit/home.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "14", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "15", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "15", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "7", "inputVector": "", "url": "http://localhost:8090/bodgeit/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "16", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "14", "inputVector": "", "url": "http://localhost:8090/bodgeit/home.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "17", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "61", "inputVector": "", "url": "http://localhost:8090/bodgeit/contact.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "18", "alertRef": "10020-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "7", "inputVector": "", "url": "http://localhost:8090/bodgeit/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "19", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "42", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "20", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "61", "inputVector": "", "url": "http://localhost:8090/bodgeit/contact.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "21", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "63", "inputVector": "", "url": "http://localhost:8090/bodgeit/about.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "22", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "67", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "23", "alertRef": "10020-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_1\" \"quantity_10\" \"quantity_11\" \"quantity_12\" \"quantity_13\" \"quantity_14\" \"quantity_15\" \"quantity_16\" \"quantity_17\" \"quantity_18\" \"quantity_19\" \"quantity_2\" \"quantity_20\" \"quantity_21\" \"quantity_22\" \"quantity_23\" \"quantity_24\" \"quantity_25\" \"quantity_26\" \"quantity_27\" \"quantity_28\" \"quantity_29\" \"quantity_3\" \"quantity_30\" \"quantity_31\" \"quantity_32\" \"quantity_4\" \"quantity_5\" \"quantity_6\" \"quantity_7\" \"quantity_8\" \"quantity_9\" \"update\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "42", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "24", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "63", "inputVector": "", "url": "http://localhost:8090/bodgeit/about.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "25", "alertRef": "10038-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "61", "inputVector": "", "url": "http://localhost:8090/bodgeit/contact.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "26", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "67", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "27", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "61", "inputVector": "", "url": "http://localhost:8090/bodgeit/contact.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "28", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "63", "inputVector": "", "url": "http://localhost:8090/bodgeit/about.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "29", "alertRef": "10027"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"q\" ].", "method": "GET", "evidence": "<FORM name='query' method='GET'>", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "67", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "30", "alertRef": "10202"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "42", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "31", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "61", "inputVector": "", "url": "http://localhost:8090/bodgeit/contact.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "32", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "63", "inputVector": "", "url": "http://localhost:8090/bodgeit/about.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "33", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "67", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "34", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "63", "inputVector": "", "url": "http://localhost:8090/bodgeit/about.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "35", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "70", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=6", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "36", "alertRef": "10020-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity(23);\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "42", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "37", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "67", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "38", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "71", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=5", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "39", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "42", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "40", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "70", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=6", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "41", "alertRef": "10038-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "67", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "42", "alertRef": "10021"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "70", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=6", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "43", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "42", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "44", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "73", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=3", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "45", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "71", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=5", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "46", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "70", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=6", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "47", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "73", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=3", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "48", "alertRef": "10038-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "70", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=6", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "49", "alertRef": "10021"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "71", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=5", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "50", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "74", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=2", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "51", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "71", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=5", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "52", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "73", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=3", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "53", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "73", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=3", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "54", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "71", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=5", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "55", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "75", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=7", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "56", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "74", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=2", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "57", "alertRef": "10038-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "73", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=3", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "58", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "75", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=7", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "59", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "76", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=4", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "60", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "77", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=1", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "61", "alertRef": "10020-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "75", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=7", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "62", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "76", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=4", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "63", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "75", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=7", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "64", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "77", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=1", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "65", "alertRef": "10038-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "74", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=2", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "66", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "75", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=7", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "67", "alertRef": "10021"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "76", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=4", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "68", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "74", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=2", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "69", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "76", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=4", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "70", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "78", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=10", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "71", "alertRef": "10020-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "74", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=2", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "72", "alertRef": "10021"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "77", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=1", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "73", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "76", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=4", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "74", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "77", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=1", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "75", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "77", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?typeid=1", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "76", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "79", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=23", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "77", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "82", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=25", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "78", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "78", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=10", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "79", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "79", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=23", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "80", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "82", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=25", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "81", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "78", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=10", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "82", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "79", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=23", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "83", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "83", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=4", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "84", "alertRef": "10020-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "82", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=25", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "85", "alertRef": "10202"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "79", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=23", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "86", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "83", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=4", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "87", "alertRef": "10038-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "82", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=25", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "88", "alertRef": "10027"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "79", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=23", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "89", "alertRef": "10109"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "78", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=10", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "90", "alertRef": "10027"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "83", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=4", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "91", "alertRef": "10202"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "82", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=25", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "92", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "79", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=23", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "93", "alertRef": "10036"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "78", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=10", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "94", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "82", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=25", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "95", "alertRef": "10036"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=23\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=23\r\n\r\nThe user-controlled value was:\r\n23", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "79", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=23", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "96", "alertRef": "10031"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "83", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=4", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "97", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "78", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=10", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "98", "alertRef": "10036"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=25\r\n\r\nappears to include user input in: \r\n\r\na(n) [td] tag [width] attribute \r\n\r\nThe user input found was:\r\nprodid=25\r\n\r\nThe user-controlled value was:\r\n25%", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "82", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=25", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "99", "alertRef": "10031"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "79", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=23", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "100", "alertRef": "10021"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=10\r\n\r\nappears to include user input in: \r\n\r\na(n) [table] tag [width] attribute \r\n\r\nThe user input found was:\r\nprodid=10\r\n\r\nThe user-controlled value was:\r\n100%", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "78", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=10", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "101", "alertRef": "10031"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "83", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=4", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "102", "alertRef": "10109"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=25\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=25\r\n\r\nThe user-controlled value was:\r\n25", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "82", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=25", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "103", "alertRef": "10031"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "85", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=8", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "104", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "83", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=4", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "106", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "82", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=25", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "107", "alertRef": "10021"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=10\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=10\r\n\r\nThe user-controlled value was:\r\n10", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "78", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=10", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "108", "alertRef": "10031"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "85", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=8", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "109", "alertRef": "10038-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "83", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=4", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "110", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "86", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=1", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "111", "alertRef": "10020-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "78", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=10", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "112", "alertRef": "10021"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "85", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=8", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "113", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "86", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=1", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "114", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "90", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=13", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "115", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "92", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=22", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "116", "alertRef": "10020-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "85", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=8", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "117", "alertRef": "10027"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "86", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=1", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "118", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "90", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=13", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "119", "alertRef": "10038-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "85", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=8", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "120", "alertRef": "10109"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "90", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=13", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "121", "alertRef": "10202"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "86", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=1", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "122", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "85", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=8", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "123", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "92", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=22", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "124", "alertRef": "10038-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "86", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=1", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "125", "alertRef": "10109"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "90", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=13", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "126", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "85", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=8", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "127", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "86", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=1", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "128", "alertRef": "10036"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "92", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=22", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "129", "alertRef": "10202"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "90", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=13", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "130", "alertRef": "10109"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "86", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=1", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "131", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "90", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=13", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "132", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "92", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=22", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "133", "alertRef": "10027"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=13\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=13\r\n\r\nThe user-controlled value was:\r\n13", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "90", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=13", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "134", "alertRef": "10031"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "94", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=17", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "135", "alertRef": "10020-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "92", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=22", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "136", "alertRef": "10109"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "90", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=13", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "137", "alertRef": "10021"}, {"sourceid": "3", "other": "The following pattern was used: \\bQUERY\\b and was detected in the element starting with: \"//http://stackoverflow.com/questions/316781/how-to-build-query-string-with-javascript\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "query", "pluginId": "10027", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "96", "inputVector": "", "url": "http://localhost:8090/bodgeit/js/util.js", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "138", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "92", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=22", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "139", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"////The following is from:\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "from", "pluginId": "10027", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "96", "inputVector": "", "url": "http://localhost:8090/bodgeit/js/util.js", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "140", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "97", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=16", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "141", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "94", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=17", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "142", "alertRef": "10038-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=22\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=22\r\n\r\nThe user-controlled value was:\r\n22", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "92", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=22", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "143", "alertRef": "10031"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "96", "inputVector": "", "url": "http://localhost:8090/bodgeit/js/util.js", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "144", "alertRef": "10036"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "94", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=17", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "145", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "97", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=16", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "146", "alertRef": "10038-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "92", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=22", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "147", "alertRef": "10021"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "96", "inputVector": "", "url": "http://localhost:8090/bodgeit/js/util.js", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "148", "alertRef": "10021"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "97", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=16", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "149", "alertRef": "10202"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "94", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=17", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "150", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "98", "inputVector": "", "url": "http://localhost:8090/bodgeit/admin.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "151", "alertRef": "10020-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "94", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=17", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "152", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "100", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=14", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "153", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "94", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=17", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "154", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "97", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=16", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "155", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "98", "inputVector": "", "url": "http://localhost:8090/bodgeit/admin.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "156", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "100", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=14", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "157", "alertRef": "10038-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "97", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=16", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "158", "alertRef": "10109"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=17\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=17\r\n\r\nThe user-controlled value was:\r\n17", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "94", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=17", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "159", "alertRef": "10031"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "94", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=17", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "160", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "97", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=16", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "161", "alertRef": "10036"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "100", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=14", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "162", "alertRef": "10202"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "98", "inputVector": "", "url": "http://localhost:8090/bodgeit/admin.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "163", "alertRef": "10027"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=16\r\n\r\nappears to include user input in: \r\n\r\na(n) [td] tag [width] attribute \r\n\r\nThe user input found was:\r\nprodid=16\r\n\r\nThe user-controlled value was:\r\n16%", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "97", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=16", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "164", "alertRef": "10031"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "100", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=14", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "165", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "101", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "167", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "98", "inputVector": "", "url": "http://localhost:8090/bodgeit/admin.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "168", "alertRef": "10036"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "100", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=14", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "170", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "100", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=14", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "172", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "101", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "174", "alertRef": "10038-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=14\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=14\r\n\r\nThe user-controlled value was:\r\n14", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "100", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=14", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "175", "alertRef": "10031"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "98", "inputVector": "", "url": "http://localhost:8090/bodgeit/admin.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "177", "alertRef": "10021"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "100", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=14", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "178", "alertRef": "10021"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=16\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=16\r\n\r\nThe user-controlled value was:\r\n16", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "97", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=16", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "179", "alertRef": "10031"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"password1\" \"password2\" \"submit\" ].", "method": "POST", "evidence": "<form method=\"POST\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "101", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "180", "alertRef": "10202"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "97", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=16", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "181", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "104", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=29", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "182", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "104", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=29", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "183", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "105", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=19", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "184", "alertRef": "10020-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "104", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=29", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "185", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "108", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=30", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "186", "alertRef": "10020-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "POST", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "101", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "187", "alertRef": "10027"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "104", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=29", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "188", "alertRef": "10027"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "104", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=29", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "189", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "108", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=30", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "190", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "101", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "191", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "105", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=19", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "192", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "104", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=29", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "193", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "101", "inputVector": "", "url": "http://localhost:8090/bodgeit/password.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "194", "alertRef": "10021"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "105", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=19", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "195", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "108", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=30", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "196", "alertRef": "10202"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=29\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=29\r\n\r\nThe user-controlled value was:\r\n29", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "104", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=29", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "197", "alertRef": "10031"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "105", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=19", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "198", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "110", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=3", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "199", "alertRef": "10020-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "108", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=30", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "200", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "104", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=29", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "201", "alertRef": "10021"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "105", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=19", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "202", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "110", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=3", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "203", "alertRef": "10038-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "108", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=30", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "204", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "105", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=19", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "205", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "112", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=12", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "206", "alertRef": "10020-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "110", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=3", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "207", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "108", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=30", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "208", "alertRef": "10036"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=19\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=19\r\n\r\nThe user-controlled value was:\r\n19", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "105", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=19", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "209", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=30\r\n\r\nappears to include user input in: \r\n\r\na(n) [td] tag [width] attribute \r\n\r\nThe user input found was:\r\nprodid=30\r\n\r\nThe user-controlled value was:\r\n30%", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "108", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=30", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "210", "alertRef": "10031"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "110", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=3", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "211", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "112", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=12", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "212", "alertRef": "10038-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "105", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=19", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "213", "alertRef": "10021"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "110", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=3", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "215", "alertRef": "10109"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "112", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=12", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "216", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "110", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=3", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "217", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "114", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=31", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "218", "alertRef": "10020-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=30\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=30\r\n\r\nThe user-controlled value was:\r\n30", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "108", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=30", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "219", "alertRef": "10031"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "112", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=12", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "220", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "110", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=3", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "221", "alertRef": "10021"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "112", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=12", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "222", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "114", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=31", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "223", "alertRef": "10038-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "108", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=30", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "224", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "116", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=15", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "225", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "112", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=12", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "226", "alertRef": "10036"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "114", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=31", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "227", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "116", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=15", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "228", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "117", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=28", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "229", "alertRef": "10020-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=12\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=12\r\n\r\nThe user-controlled value was:\r\n12", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "112", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=12", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "230", "alertRef": "10031"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "116", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=15", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "231", "alertRef": "10202"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "114", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=31", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "232", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "112", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=12", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "233", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "117", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=28", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "234", "alertRef": "10038-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "114", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=31", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "235", "alertRef": "10109"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "116", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=15", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "236", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "120", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=6", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "237", "alertRef": "10020-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "117", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=28", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "238", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "114", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=31", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "239", "alertRef": "10036"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "116", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=15", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "240", "alertRef": "10109"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "117", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=28", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "241", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "116", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=15", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "242", "alertRef": "10036"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=31\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=31\r\n\r\nThe user-controlled value was:\r\n31", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "114", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=31", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "243", "alertRef": "10031"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "120", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=6", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "244", "alertRef": "10038-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "117", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=28", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "245", "alertRef": "10109"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=15\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=15\r\n\r\nThe user-controlled value was:\r\n15", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "116", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=15", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "246", "alertRef": "10031"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "120", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=6", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "247", "alertRef": "10202"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "114", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=31", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "248", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "117", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=28", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "249", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "116", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=15", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "250", "alertRef": "10021"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "120", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=6", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "251", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "122", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=26", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "252", "alertRef": "10020-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=28\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=28\r\n\r\nThe user-controlled value was:\r\n28", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "117", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=28", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "253", "alertRef": "10031"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "124", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=20", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "254", "alertRef": "10020-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "120", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=6", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "255", "alertRef": "10109"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "117", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=28", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "256", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "122", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=26", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "257", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "124", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=20", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "258", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "120", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=6", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "259", "alertRef": "10036"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "124", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=20", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "260", "alertRef": "10202"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "120", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=6", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "261", "alertRef": "10021"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "122", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=26", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "262", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "126", "inputVector": "", "url": "http://localhost:8090/bodgeit/style.css", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "263", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "124", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=20", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "264", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "127", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=24", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "265", "alertRef": "10020-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "124", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=20", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "266", "alertRef": "10109"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "122", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=26", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "267", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "126", "inputVector": "", "url": "http://localhost:8090/bodgeit/style.css", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "268", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "127", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=24", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "269", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "124", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=20", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "270", "alertRef": "10036"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "122", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=26", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "271", "alertRef": "10109"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "127", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=24", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "272", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "129", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=27", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "273", "alertRef": "10020-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=20\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=20\r\n\r\nThe user-controlled value was:\r\n20", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "124", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=20", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "274", "alertRef": "10031"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "122", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=26", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "275", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "127", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=24", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "276", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "129", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=27", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "277", "alertRef": "10038-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "124", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=20", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "278", "alertRef": "10021"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=26\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=26\r\n\r\nThe user-controlled value was:\r\n26", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "122", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=26", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "279", "alertRef": "10031"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "127", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=24", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "280", "alertRef": "10109"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "129", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=27", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "281", "alertRef": "10202"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "122", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=26", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "282", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "131", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=5", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "283", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "127", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=24", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "284", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "129", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=27", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "285", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "133", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=7", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "286", "alertRef": "10020-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=24\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=24\r\n\r\nThe user-controlled value was:\r\n24", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "127", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=24", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "287", "alertRef": "10031"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "129", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=27", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "288", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "133", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=7", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "289", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "129", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=27", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "290", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "127", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=24", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "291", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "131", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=5", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "292", "alertRef": "10038-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=27\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=27\r\n\r\nThe user-controlled value was:\r\n27", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "129", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=27", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "293", "alertRef": "10031"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "129", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=27", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "294", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "135", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=11", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "295", "alertRef": "10020-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "133", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=7", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "296", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "131", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=5", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "297", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "136", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=9", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "298", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "135", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=11", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "299", "alertRef": "10038-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "133", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=7", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "300", "alertRef": "10027"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "133", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=7", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "301", "alertRef": "10109"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "131", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=5", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "302", "alertRef": "10027"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "135", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=11", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "303", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "136", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=9", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "304", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "133", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=7", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "305", "alertRef": "10036"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "131", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=5", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "306", "alertRef": "10109"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "135", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=11", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "307", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "133", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=7", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "308", "alertRef": "10021"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "136", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=9", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "309", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "131", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=5", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "310", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "131", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=5", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "311", "alertRef": "10021"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "135", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=11", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "312", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "138", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=21", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "313", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "135", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=11", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "314", "alertRef": "10036"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "136", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=9", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "315", "alertRef": "10027"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "136", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=9", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "316", "alertRef": "10109"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=11\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=11\r\n\r\nThe user-controlled value was:\r\n11", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "135", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=11", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "317", "alertRef": "10031"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "138", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=21", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "318", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "141", "inputVector": "", "url": "http://localhost:8090/bodgeit/images/130.png", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "319", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "136", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=9", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "320", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "135", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=11", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "321", "alertRef": "10021"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "138", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=21", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "322", "alertRef": "10202"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "141", "inputVector": "", "url": "http://localhost:8090/bodgeit/images/130.png", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "323", "alertRef": "10021"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "136", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=9", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "324", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "143", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=2", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "325", "alertRef": "10020-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "138", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=21", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "326", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "142", "inputVector": "", "url": "http://localhost:8090/bodgeit/images/129.png", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "327", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "144", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=18", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "328", "alertRef": "10020-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "138", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=21", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "329", "alertRef": "10109"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "142", "inputVector": "", "url": "http://localhost:8090/bodgeit/images/129.png", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "330", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "143", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=2", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "331", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "138", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=21", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "332", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "144", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=18", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "333", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "146", "inputVector": "", "url": "http://localhost:8090/bodgeit/contact.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "334", "alertRef": "10020-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=21\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=21\r\n\r\nThe user-controlled value was:\r\n21", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "138", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=21", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "335", "alertRef": "10031"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "143", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=2", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "336", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "144", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=18", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "337", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "146", "inputVector": "", "url": "http://localhost:8090/bodgeit/contact.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "338", "alertRef": "10038-1"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "138", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=21", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "339", "alertRef": "10021"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "143", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=2", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "340", "alertRef": "10027"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "POST", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "146", "inputVector": "", "url": "http://localhost:8090/bodgeit/contact.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "341", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "148", "inputVector": "", "url": "http://localhost:8090/bodgeit/score.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "342", "alertRef": "10020-1"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "144", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=18", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "343", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "146", "inputVector": "", "url": "http://localhost:8090/bodgeit/contact.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "344", "alertRef": "10036"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "143", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=2", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "345", "alertRef": "10109"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "144", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=18", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "346", "alertRef": "10109"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "146", "inputVector": "", "url": "http://localhost:8090/bodgeit/contact.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "347", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "144", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=18", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "348", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "143", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=2", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "349", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "148", "inputVector": "", "url": "http://localhost:8090/bodgeit/score.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "350", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "152", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=32", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "351", "alertRef": "10020-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=18\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=18\r\n\r\nThe user-controlled value was:\r\n18", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "144", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=18", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "352", "alertRef": "10031"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "143", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=2", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "353", "alertRef": "10021"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "148", "inputVector": "", "url": "http://localhost:8090/bodgeit/score.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "354", "alertRef": "10027"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "144", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=18", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "355", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "155", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp?q=ZAP", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "356", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "152", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=32", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "357", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "358", "alertRef": "10020-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "155", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp?q=ZAP", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "359", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "148", "inputVector": "", "url": "http://localhost:8090/bodgeit/score.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "360", "alertRef": "10036"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ].", "method": "GET", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "152", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=32", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "361", "alertRef": "10202"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "148", "inputVector": "", "url": "http://localhost:8090/bodgeit/score.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "362", "alertRef": "10021"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "155", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp?q=ZAP", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "363", "alertRef": "10027"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "152", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=32", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "364", "alertRef": "10027"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "155", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp?q=ZAP", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "365", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "wascid": "15", "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", "messageId": "157", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "X-Frame-Options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "366", "alertRef": "10020-1"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a href=\"#\" onclick=\"decQuantity();\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "152", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=32", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "367", "alertRef": "10109"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "155", "inputVector": "", "url": "http://localhost:8090/bodgeit/search.jsp?q=ZAP", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "368", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "152", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=32", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "369", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "370", "alertRef": "10038-1"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/product.jsp?prodid=32\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nprodid=32\r\n\r\nThe user-controlled value was:\r\n32", "method": "GET", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "152", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=32", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "prodid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "372", "alertRef": "10031"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "157", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "373", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_1\" \"quantity_10\" \"quantity_11\" \"quantity_12\" \"quantity_13\" \"quantity_14\" \"quantity_15\" \"quantity_16\" \"quantity_17\" \"quantity_18\" \"quantity_19\" \"quantity_2\" \"quantity_20\" \"quantity_21\" \"quantity_22\" \"quantity_23\" \"quantity_24\" \"quantity_25\" \"quantity_26\" \"quantity_27\" \"quantity_28\" \"quantity_29\" \"quantity_3\" \"quantity_30\" \"quantity_31\" \"quantity_32\" \"quantity_4\" \"quantity_5\" \"quantity_6\" \"quantity_7\" \"quantity_8\" \"quantity_9\" \"update\" ].", "method": "POST", "evidence": "<form action=\"basket.jsp\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "374", "alertRef": "10202"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "152", "inputVector": "", "url": "http://localhost:8090/bodgeit/product.jsp?prodid=32", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "375", "alertRef": "10021"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"desc\" \"price\" \"product\" \"type\" ].", "method": "GET", "evidence": "<form id=\"advanced\" name=\"advanced\" method=\"POST\" onsubmit=\"return validateForm(this);false;\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "157", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "376", "alertRef": "10202"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 2: \"q\" ].", "method": "GET", "evidence": "<form id=\"query\" name=\"advanced\" method=\"POST\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "157", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "378", "alertRef": "10202"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "POST", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "379", "alertRef": "10027"}, {"sourceid": "3", "other": "The following pattern was used: \\bADMIN\\b and was detected in the element starting with: \"<!-- td align=\"center\" width=\"16%\"><a href=\"admin.jsp\">Admin</a></td-->\", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "admin", "pluginId": "10027", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "157", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "380", "alertRef": "10027"}, {"sourceid": "3", "other": "The following pattern was used: \\bQUERY\\b and was detected in the element starting with: \"<SCRIPT>\n    loadfile('./js/encryption.js');\n    \n    var key = \"6850c9a9-6c52-43\";\n    \n    function validateForm(form){\n      \", see evidence field for the suspicious comment/snippet.", "method": "GET", "evidence": "query", "pluginId": "10027", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.", "messageId": "157", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "", "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.", "alert": "Information Disclosure - Suspicious Comments", "param": "", "attack": "", "name": "Information Disclosure - Suspicious Comments", "risk": "Informational", "id": "382", "alertRef": "10027"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "POST", "evidence": "<a href=\"#\" onclick=\"decQuantity(23);\"><img src=\"images/130.png\" alt=\"Decrease quantity in basket\" border=\"0\"></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "383", "alertRef": "10109"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "157", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "384", "alertRef": "10036"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "387", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "157", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "388", "alertRef": "10021"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_1=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_1", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "390", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_10=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_10", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "391", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_12=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_12", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "392", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_13=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_13", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "394", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_14=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_14", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "395", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_15=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_15", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "397", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_16=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_16", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "399", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_20=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_20", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "401", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [table] tag [width] attribute \r\n\r\nThe user input found was:\r\nproductid=10\r\n\r\nThe user-controlled value was:\r\n100%", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "160", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "productid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "402", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_21=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_21", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "404", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_22=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_22", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "406", "alertRef": "10031"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "POST", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "160", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "407", "alertRef": "10021"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_23=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_23", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "408", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_24=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_24", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "410", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_25=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_25", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "412", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_26=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_26", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "414", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_27=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_27", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "417", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_28=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_28", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "419", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_29=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_29", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "422", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_3=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_3", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "424", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_30=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_30", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "427", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_31=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_31", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "428", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_4=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_4", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "429", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_8=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_8", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "432", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_9=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_9", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "433", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [td] tag [width] attribute \r\n\r\nThe user input found was:\r\nproductid=25\r\n\r\nThe user-controlled value was:\r\n25%", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "164", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "productid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "491", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [td] tag [width] attribute \r\n\r\nThe user input found was:\r\nproductid=16\r\n\r\nThe user-controlled value was:\r\n16%", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "176", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "productid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "876", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nupdate=Update Basket\r\n\r\nThe user-controlled value was:\r\nupdate basket", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "156", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "update", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1015", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [td] tag [width] attribute \r\n\r\nThe user input found was:\r\nproductid=30\r\n\r\nThe user-controlled value was:\r\n30%", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "183", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "productid", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1028", "alertRef": "10031"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "215", "inputVector": "", "url": "http://localhost:8090/bodgeit/images/151.png", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "1115", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "215", "inputVector": "", "url": "http://localhost:8090/bodgeit/images/151.png", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1119", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "218", "inputVector": "", "url": "http://localhost:8090/bodgeit/images/152.png", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "1124", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "218", "inputVector": "", "url": "http://localhost:8090/bodgeit/images/152.png", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1125", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "219", "inputVector": "", "url": "http://localhost:8090/bodgeit/images/154.png", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "1126", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "219", "inputVector": "", "url": "http://localhost:8090/bodgeit/images/154.png", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "X-Content-Type-Options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "1128", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "HTTP/1.1 500 Internal Server Error", "pluginId": "90022", "cweid": "200", "confidence": "Medium", "wascid": "13", "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.", "messageId": "221", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"WSTG-v42-ERRH-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces", "WSTG-v42-ERRH-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling", "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "", "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.", "alert": "Application Error Disclosure", "param": "", "attack": "", "name": "Application Error Disclosure", "risk": "Low", "id": "1131", "alertRef": "90022"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "221", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "1133", "alertRef": "10038-1"}, {"sourceid": "3", "other": "", "method": "POST", "evidence": "Apache-Coyote/1.1", "pluginId": "10036", "cweid": "200", "confidence": "High", "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "221", "inputVector": "", "url": "http://localhost:8090/bodgeit/advanced.jsp", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"}, "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "1136", "alertRef": "10036"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_1=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_1", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1291", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_10=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_10", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1293", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_12=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_12", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1295", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_13=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_13", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1298", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_14=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_14", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1300", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_15=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_15", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1303", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_16=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_16", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1306", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_20=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_20", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1310", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_21=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_21", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1313", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_22=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_22", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1316", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_23=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_23", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1319", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_24=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_24", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1322", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_25=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_25", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1325", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_26=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_26", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1329", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_27=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_27", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1333", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_28=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_28", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1337", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_29=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_29", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1341", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_3=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_3", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1345", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_30=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_30", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1349", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_31=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_31", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1353", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_4=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_4", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1357", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_8=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_8", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1361", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_9=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "229", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_9", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1365", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_4=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "230", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_4", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1386", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_8=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "230", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_8", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "1390", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_23=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "223", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_23", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "2373", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_25=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "223", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_25", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "2381", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_1=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "232", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_1", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "3073", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_22=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "233", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_22", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "3123", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_13=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "234", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_13", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "3140", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_14=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "234", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_14", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "3144", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_16=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "234", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_16", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "3152", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_17=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "234", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_17", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "3156", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_29=333\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "234", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_29", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "3196", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_17=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "234", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_17", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "3433", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_19=33\r\n\r\nThe user-controlled value was:\r\n333", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "236", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_19", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "4873", "alertRef": "10031"}, {"sourceid": "3", "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttp://localhost:8090/bodgeit/basket.jsp\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nquantity_19=33\r\n\r\nThe user-controlled value was:\r\n33", "method": "POST", "evidence": "", "pluginId": "10031", "cweid": "20", "confidence": "Low", "wascid": "20", "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.", "messageId": "236", "inputVector": "", "url": "http://localhost:8090/bodgeit/basket.jsp", "tags": {"OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/", "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"}, "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute", "solution": "Validate all input and sanitize output it before writing to any HTML attributes.", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "param": "quantity_19", "attack": "", "name": "User Controllable HTML Element Attribute (Potential XSS)", "risk": "Informational", "id": "4955", "alertRef": "10031"}]